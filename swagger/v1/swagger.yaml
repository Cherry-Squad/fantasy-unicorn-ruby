---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create an achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 17
                user_id: 342
                achievement_identifier: 42
                created_at: '2022-01-09T14:17:43.942Z'
                updated_at: '2022-01-09T14:17:43.942Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 18
                user_id: 343
                achievement_identifier: 979
                created_at: '2022-01-09T14:17:44.205Z'
                updated_at: '2022-01-09T14:17:44.205Z'
              - id: 19
                user_id: 343
                achievement_identifier: 570
                created_at: '2022-01-09T14:17:44.206Z'
                updated_at: '2022-01-09T14:17:44.206Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 22
                user_id: 346
                achievement_identifier: 864
                created_at: '2022-01-09T14:17:44.980Z'
                updated_at: '2022-01-09T14:17:44.980Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 348
                  username: antonette#7
                  email: lorine@crooks.net
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-09T14:17:45.744Z'
                  updated_at: '2022-01-09T14:17:45.744Z'
                  provider: email
                  uid: lorine@crooks.net
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id:
                  username: domingo#12
                  email: zackary.brakus
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at:
                  updated_at:
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'dewayne_pouros@ernser.biz' has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: jeramy@klein-medhurst.com
                  email_validated: false
                  id: 353
                  fantasy_points: 0
                  coins: 0
                  uid: jeramy@klein-medhurst.com
                  username: kristina#15
                  preferred_lang: ru_RU
                  avatar_id:
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid; email is not confirmed
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 361
                  username: linn.rodriguez#23
                  email: oscar_frami@halvorson.biz
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: oscar_frami@halvorson.biz
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/auth/confirmation":
    post:
      summary: Resend confirmation
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: confirmation sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'mireya@okon.org' containing instructions
                  for confirming your account.
        '404':
          description: email is invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'brenda_roob@klocko-kovacek.io'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/auth/password":
    put:
      summary: Change password
      tags:
      - Auth
      description: Change password
      parameters: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: willian@rice-cormier.net
                  email_validated: false
                  id: 365
                  fantasy_points: 0
                  coins: 0
                  uid: willian@rice-cormier.net
                  username: reanna.sanford#27
                  preferred_lang: ru_RU
                  avatar_id:
                  created_at: '2022-01-09T14:17:52.523Z'
                  updated_at: '2022-01-09T14:17:52.777Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
              - password
              - password_confirmation
  "/api/v1/auth/password/":
    put:
      summary: Change password with reset_password_token
      tags:
      - Auth
      description: Set password that was reset
      parameters: []
      security: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: samuel@dubuque.biz
                  email_validated: false
                  id: 369
                  fantasy_points: 0
                  coins: 0
                  uid: samuel@dubuque.biz
                  username: clint.wiegand#31
                  preferred_lang: ru_RU
                  avatar_id:
                  created_at: '2022-01-09T14:17:54.030Z'
                  updated_at: '2022-01-09T14:17:54.330Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
                reset_password_token:
                  type: string
              required:
              - password
              - password_confirmation
              - reset_password_token
    post:
      summary: Send a password reset email
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: email has been sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'marty.kuphal@ruecker-crona.com'
                  containing instructions for resetting your password.
        '404':
          description: invalid email
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'johnny'.
        '401':
          description: missing email
          content:
            application/json:
              example:
                success: false
                errors:
                - You must provide an email address.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 29
                expiring_at: '2022-01-16T14:17:56.358Z'
                user_id: 376
                created_at: '2022-01-09T14:17:56.365Z'
                updated_at: '2022-01-09T14:17:56.365Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 30
                expiring_at: '2022-07-30T00:00:00.000Z'
                user_id: 377
                created_at: '2022-01-09T14:17:56.613Z'
                updated_at: '2022-01-09T14:17:56.613Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 33
                expiring_at: '2022-03-22T00:00:00.000Z'
                user_id: 380
                created_at: '2022-01-09T14:17:57.384Z'
                updated_at: '2022-01-09T14:17:57.384Z'
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 37
                expiring_at: '2022-02-14T00:00:00.000Z'
                user_id: 384
                created_at: '2022-01-09T14:17:58.429Z'
                updated_at: '2022-01-09T14:17:58.429Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 238
                user_id: 386
                contest_id: 121
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-09T14:17:59.224Z'
                updated_at: '2022-01-09T14:17:59.224Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      tags:
      - ContestApplication
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 240
                user_id: 393
                contest_id: 126
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-09T14:18:00.724Z'
                updated_at: '2022-01-09T14:18:00.724Z'
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 243
                user_id: 396
                contest_id: 132
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-09T14:18:01.500Z'
                updated_at: '2022-01-09T14:18:01.500Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 64
                contest_application_id: 245
                stock_id: 243
                multiplier: '10.0'
                reg_price:
                final_price:
                created_at: '2022-01-09T14:18:02.536Z'
                updated_at: '2022-01-09T14:18:02.536Z'
                direction_up: true
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
                direction_up:
                  type: boolean
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 67
                contest_application_id: 249
                stock_id: 247
                multiplier: '1.0'
                reg_price: '4016.632'
                final_price:
                created_at: '2022-01-09T14:18:04.309Z'
                updated_at: '2022-01-09T14:18:04.309Z'
                direction_up: true
              - id: 68
                contest_application_id: 250
                stock_id: 248
                multiplier: '1.0'
                reg_price: '2361.4119'
                final_price:
                created_at: '2022-01-09T14:18:04.311Z'
                updated_at: '2022-01-09T14:18:04.311Z'
                direction_up: false
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 71
                contest_application_id: 256
                stock_id: 254
                multiplier: '1.0'
                reg_price: '2611.0146'
                final_price:
                created_at: '2022-01-09T14:18:06.565Z'
                updated_at: '2022-01-09T14:18:06.565Z'
                direction_up: true
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/{id}/register":
    post:
      summary: Register user in contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      tags:
      - Contest
      responses:
        '201':
          description: |-
            contest application created. contest application stocks created.
                    assign contest application stocks
          content:
            application/json:
              example:
                contest_app_stocks:
                - id: 73
                  contest_application_id: 259
                  stock_id: 257
                  multiplier: '1.2'
                  reg_price:
                  final_price:
                  created_at: '2022-01-09T14:18:07.835Z'
                  updated_at: '2022-01-09T14:18:07.835Z'
                  direction_up: true
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    properties:
                      stock_id:
                        type: integer
                      multiplier:
                        type: integer
                      direction_up:
                        type: boolean
                    required:
                    - multiplier
                    - stock_id
                    - contest_application_id
                    - direction_up
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 151
                reg_ending_at: '2022-01-11T00:00:00.000Z'
                summarizing_at: '2022-01-14T00:00:00.000Z'
                status: created
                coins_entry_fee: 7255883484
                max_fantasy_points_threshold: 8343141896
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-09T14:18:08.854Z'
                updated_at: '2022-01-09T14:18:08.854Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      tags:
      - Contest
      responses:
        '200':
          description: all contests
          content:
            application/json:
              example:
              - id: 152
                reg_ending_at: '2022-01-11T00:00:00.000Z'
                summarizing_at: '2022-01-14T00:00:00.000Z'
                status: created
                coins_entry_fee: 3360184458
                max_fantasy_points_threshold: 81412475
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up:
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-09T14:18:08.857Z'
                updated_at: '2022-01-09T14:18:08.857Z'
              - id: 153
                reg_ending_at: '2022-01-11T00:00:00.000Z'
                summarizing_at: '2022-01-15T00:00:00.000Z'
                status: created
                coins_entry_fee: 1824791711
                max_fantasy_points_threshold: 8054150011
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-09T14:18:08.858Z'
                updated_at: '2022-01-09T14:18:08.858Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 156
                reg_ending_at: '2022-01-11T00:00:00.000Z'
                summarizing_at: '2022-01-16T00:00:00.000Z'
                status: created
                coins_entry_fee: 140842114
                max_fantasy_points_threshold: 4741542247
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-09T14:18:09.630Z'
                updated_at: '2022-01-09T14:18:09.630Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 259
                name: FISV
                created_at: '2022-01-09T14:18:10.398Z'
                updated_at: '2022-01-09T14:18:10.398Z'
        '400':
          description: stock already exists / invalid stock
          content:
            application/json:
              example:
                error: |
                  An Error occurred PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint "index_stocks_on_name"
                  DETAIL:  Key (name)=(AMZN) already exists.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 262
                name: GOOG
                created_at: '2022-01-09T14:18:10.659Z'
                updated_at: '2022-01-09T14:18:10.659Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 265
                name: MA
                created_at: '2022-01-09T14:18:11.440Z'
                updated_at: '2022-01-09T14:18:11.440Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 437
                username: colin#99
                email: kareem@herman.info
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-09T14:18:12.445Z'
                updated_at: '2022-01-09T14:18:12.448Z'
                provider: email
                uid: kareem@herman.info
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      parameters: []
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                username: test
                coins: 3
                email: georgene@morar-koelpin.net
                email_validated: false
                id: 438
                fantasy_points: 0
                uid: georgene@morar-koelpin.net
                preferred_lang: ru_RU
                avatar_id:
                created_at: '2022-01-09T14:18:12.701Z'
                updated_at: '2022-01-09T14:18:12.713Z'
                provider: email
                allow_password_change: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: email
                preferred_lang:
                  type: string
                fantasy_points:
                  type: integer
                coins:
                  type: integer
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              example:
                id: 439
                username: rebbecca_gulgowski#101
                email: shaunta_morar@abshire.org
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-09T14:18:12.959Z'
                updated_at: '2022-01-09T14:18:12.959Z'
                provider: email
                uid: shaunta_morar@abshire.org
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 260
                user_id: 443
                contest_id: 158
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-09T14:18:13.962Z'
                updated_at: '2022-01-09T14:18:13.962Z'
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
