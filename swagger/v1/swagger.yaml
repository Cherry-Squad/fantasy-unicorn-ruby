---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create an achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 257
                user_id: 5496
                achievement_identifier: 42
                created_at: '2022-01-07T21:14:08.129Z'
                updated_at: '2022-01-07T21:14:08.129Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 258
                user_id: 5497
                achievement_identifier: 424
                created_at: '2022-01-07T21:14:08.433Z'
                updated_at: '2022-01-07T21:14:08.433Z'
              - id: 259
                user_id: 5497
                achievement_identifier: 675
                created_at: '2022-01-07T21:14:08.439Z'
                updated_at: '2022-01-07T21:14:08.439Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 262
                user_id: 5500
                achievement_identifier: 713
                created_at: '2022-01-07T21:14:09.411Z'
                updated_at: '2022-01-07T21:14:09.411Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 5502
                  username: kellie.hansen#7
                  email: edmund.lowe@willms.info
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-07T21:14:10.351Z'
                  updated_at: '2022-01-07T21:14:10.351Z'
                  provider: email
                  uid: edmund.lowe@willms.info
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id: 
                  username: adelina#12
                  email: doreen
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: 
                  updated_at: 
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'saran.runolfsson@prohaska-bahringer.com'
                  has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: arnoldo_leuschke@tromp-maggio.com
                  email_validated: false
                  id: 5507
                  fantasy_points: 0
                  coins: 0
                  uid: arnoldo_leuschke@tromp-maggio.com
                  username: damien.gleichner#15
                  preferred_lang: ru_RU
                  avatar_id: 
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid; email is not confirmed
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 5515
                  username: tamica_johns#23
                  email: timika@labadie.net
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: timika@labadie.net
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/auth/confirmation":
    post:
      summary: Resend confirmation
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: confirmation sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'bradford_frami@spinka.org' containing
                  instructions for confirming your account.
        '404':
          description: email is invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'kris.ledner@adams.org'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/auth/password":
    put:
      summary: Change password
      tags:
      - Auth
      description: Change password
      parameters: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: jeanna@goodwin.co
                  email_validated: false
                  id: 5519
                  fantasy_points: 0
                  coins: 0
                  uid: jeanna@goodwin.co
                  username: heriberto#27
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-07T21:14:19.340Z'
                  updated_at: '2022-01-07T21:14:19.667Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
              - password
              - password_confirmation
  "/api/v1/auth/password/":
    put:
      summary: Change password with reset_password_token
      tags:
      - Auth
      description: Set password that was reset
      parameters: []
      security: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: chuck@huels.com
                  email_validated: false
                  id: 5523
                  fantasy_points: 0
                  coins: 0
                  uid: chuck@huels.com
                  username: maud_hoppe#31
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-07T21:14:21.312Z'
                  updated_at: '2022-01-07T21:14:21.806Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
                reset_password_token:
                  type: string
              required:
              - password
              - password_confirmation
              - reset_password_token
    post:
      summary: Send a password reset email
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: email has been sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'eldridge_okon@tromp.com' containing
                  instructions for resetting your password.
        '404':
          description: invalid email
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'julio.jerde'.
        '401':
          description: missing email
          content:
            application/json:
              example:
                success: false
                errors:
                - You must provide an email address.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 419
                expiring_at: '2022-01-14T21:14:24.656Z'
                user_id: 5530
                created_at: '2022-01-07T21:14:24.682Z'
                updated_at: '2022-01-07T21:14:24.682Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 420
                expiring_at: '2022-09-26T00:00:00.000Z'
                user_id: 5531
                created_at: '2022-01-07T21:14:25.052Z'
                updated_at: '2022-01-07T21:14:25.052Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 423
                expiring_at: '2022-04-12T00:00:00.000Z'
                user_id: 5534
                created_at: '2022-01-07T21:14:26.278Z'
                updated_at: '2022-01-07T21:14:26.278Z'
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 427
                expiring_at: '2022-05-13T00:00:00.000Z'
                user_id: 5538
                created_at: '2022-01-07T21:14:27.783Z'
                updated_at: '2022-01-07T21:14:27.783Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 3776
                user_id: 5540
                contest_id: 1828
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-07T21:14:28.962Z'
                updated_at: '2022-01-07T21:14:28.962Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      tags:
      - ContestApplication
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 3778
                user_id: 5547
                contest_id: 1833
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-07T21:14:30.992Z'
                updated_at: '2022-01-07T21:14:30.992Z'
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 3781
                user_id: 5550
                contest_id: 1839
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-07T21:14:32.159Z'
                updated_at: '2022-01-07T21:14:32.159Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 602
                contest_application_id: 3783
                stock_id: 3590
                multiplier: '10.0'
                reg_price: 
                final_price: 
                created_at: '2022-01-07T21:14:33.556Z'
                updated_at: '2022-01-07T21:14:33.556Z'
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 605
                contest_application_id: 3787
                stock_id: 3594
                multiplier: '1.0'
                reg_price: '3713.6011'
                final_price: 
                created_at: '2022-01-07T21:14:35.827Z'
                updated_at: '2022-01-07T21:14:35.827Z'
              - id: 606
                contest_application_id: 3788
                stock_id: 3595
                multiplier: '1.0'
                reg_price: '4350.5385'
                final_price: 
                created_at: '2022-01-07T21:14:35.837Z'
                updated_at: '2022-01-07T21:14:35.837Z'
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 609
                contest_application_id: 3794
                stock_id: 3601
                multiplier: '1.0'
                reg_price: '2605.183'
                final_price: 
                created_at: '2022-01-07T21:14:38.749Z'
                updated_at: '2022-01-07T21:14:38.749Z'
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/{id}/register":
    post:
      summary: Register user in contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '201':
          description: |-
            contest application created. contest application stocks created.
                    assign contest application stocks
          content:
            application/json:
              example:
                contest_app_stocks:
                - id: 611
                  contest_application_id: 3797
                  stock_id: 3604
                  multiplier: '1.2'
                  reg_price: 
                  final_price: 
                  created_at: '2022-01-07T21:14:40.366Z'
                  updated_at: '2022-01-07T21:14:40.366Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    properties:
                      stock_id:
                        type: integer
                      multiplier:
                        type: integer
                    required:
                    - multiplier
                    - stock_id
                    - contest_application_id
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 1857
                reg_ending_at: '2022-01-10T00:00:00.000Z'
                summarizing_at: '2022-01-12T00:00:00.000Z'
                status: created
                coins_entry_fee: 8263316976
                max_fantasy_points_threshold: 8679773698
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T21:14:41.279Z'
                updated_at: '2022-01-07T21:14:41.279Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      tags:
      - Contest
      responses:
        '200':
          description: all contests
          content:
            application/json:
              example:
              - id: 1858
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-11T00:00:00.000Z'
                status: created
                coins_entry_fee: 6641188117
                max_fantasy_points_threshold: 3253732448
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T21:14:41.294Z'
                updated_at: '2022-01-07T21:14:41.294Z'
              - id: 1859
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-12T00:00:00.000Z'
                status: created
                coins_entry_fee: 7766499810
                max_fantasy_points_threshold: 1954756194
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T21:14:41.300Z'
                updated_at: '2022-01-07T21:14:41.300Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 1862
                reg_ending_at: '2022-01-10T00:00:00.000Z'
                summarizing_at: '2022-01-13T00:00:00.000Z'
                status: created
                coins_entry_fee: 7864093753
                max_fantasy_points_threshold: 8085338597
                use_briefcase_only: true
                direction_strategy: single_per_user
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T21:14:42.356Z'
                updated_at: '2022-01-07T21:14:42.356Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 3605
                name: GE
                created_at: '2022-01-07T21:14:43.346Z'
                updated_at: '2022-01-07T21:14:43.346Z'
        '400':
          description: stock already exists / invalid stock
          content:
            application/json:
              example:
                error: |
                  An Error occurred PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint "index_stocks_on_name"
                  DETAIL:  Key (name)=(BABA) already exists.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 3608
                name: JPM
                created_at: '2022-01-07T21:14:43.686Z'
                updated_at: '2022-01-07T21:14:43.686Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 3611
                name: QCOM
                created_at: '2022-01-07T21:14:44.706Z'
                updated_at: '2022-01-07T21:14:44.706Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 5590
                username: allie_greenfelder#98
                email: neil@johns-schamberger.co
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-07T21:14:45.983Z'
                updated_at: '2022-01-07T21:14:45.992Z'
                provider: email
                uid: neil@johns-schamberger.co
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      parameters: []
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                username: test
                coins: 3
                email: zackary@becker-hayes.net
                email_validated: false
                id: 5591
                fantasy_points: 0
                uid: zackary@becker-hayes.net
                preferred_lang: ru_RU
                avatar_id: 
                created_at: '2022-01-07T21:14:46.327Z'
                updated_at: '2022-01-07T21:14:46.364Z'
                provider: email
                allow_password_change: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: email
                preferred_lang:
                  type: string
                fantasy_points:
                  type: integer
                coins:
                  type: integer
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              example:
                id: 5592
                username: jazmin_thompson#100
                email: galen@koch.net
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-07T21:14:46.681Z'
                updated_at: '2022-01-07T21:14:46.681Z'
                provider: email
                uid: galen@koch.net
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 3798
                user_id: 5596
                contest_id: 1864
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-07T21:14:47.960Z'
                updated_at: '2022-01-07T21:14:47.960Z'
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
