---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create a achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 489
                user_id: 4567
                achievement_identifier: 420
                created_at: '2022-01-06T17:13:58.755Z'
                updated_at: '2022-01-06T17:13:58.755Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 491
                user_id: 4569
                achievement_identifier: 16
                created_at: '2022-01-06T17:13:59.251Z'
                updated_at: '2022-01-06T17:13:59.251Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete a achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 494
                user_id: 4572
                achievement_identifier: 625
                created_at: '2022-01-06T17:14:00.022Z'
                updated_at: '2022-01-06T17:14:00.022Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 4574
                  username: tona#9
                  email: sabra@jerde.io
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-06T17:14:00.784Z'
                  updated_at: '2022-01-06T17:14:00.786Z'
                  provider: email
                  uid: sabra@jerde.io
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id:
                  username: pete#14
                  email: wilfredo
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at:
                  updated_at:
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'lon.bode@becker.org' has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: shantay.orn@nitzsche.info
                  email_validated: false
                  id: 4579
                  fantasy_points: 0
                  coins: 0
                  uid: shantay.orn@nitzsche.info
                  username: carol.cole#17
                  preferred_lang: ru_RU
                  avatar_id:
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 4585
                  username: bernadette#23
                  email: lorrie@gerlach.io
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: lorrie@gerlach.io
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 1014
                expiring_at: '2022-01-13T17:14:06.795Z'
                user_id: 4588
                created_at: '2022-01-06T17:14:06.796Z'
                updated_at: '2022-01-06T17:14:06.796Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 1016
                expiring_at: '2022-03-29T00:00:00.000Z'
                user_id: 4590
                created_at: '2022-01-06T17:14:07.292Z'
                updated_at: '2022-01-06T17:14:07.292Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 1022
                expiring_at: '2022-07-26T00:00:00.000Z'
                user_id: 4596
                created_at: '2022-01-06T17:14:08.800Z'
                updated_at: '2022-01-06T17:14:08.800Z'
              schema:
                type: object
                property:
                  id:
                    type: integer
                  expiring_at:
                    type: string
                  user_id:
                    type: integer
                  created_at:
                    type: string
                  updated_at:
                    type: string
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 1026
                expiring_at: '2022-03-15T00:00:00.000Z'
                user_id: 4600
                created_at: '2022-01-06T17:14:09.851Z'
                updated_at: '2022-01-06T17:14:09.851Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 1690
                user_id: 4603
                contest_id: 1393
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-06T17:14:10.638Z'
                updated_at: '2022-01-06T17:14:10.638Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      tags:
      - ContestApplication
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 1693
                user_id: 4607
                contest_id: 1397
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-06T17:14:11.658Z'
                updated_at: '2022-01-06T17:14:11.658Z'
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 1696
                user_id: 4610
                contest_id: 1400
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-06T17:14:12.432Z'
                updated_at: '2022-01-06T17:14:12.432Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 453
                contest_application_id: 1698
                stock_id: 1769
                multiplier: '1.0'
                reg_price:
                final_price:
                created_at: '2022-01-06T17:14:13.706Z'
                updated_at: '2022-01-06T17:14:13.706Z'
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 458
                contest_application_id: 1704
                stock_id: 1774
                multiplier: '1.0'
                reg_price: '4806.283'
                final_price:
                created_at: '2022-01-06T17:14:15.970Z'
                updated_at: '2022-01-06T17:14:15.970Z'
              - id: 459
                contest_application_id: 1705
                stock_id: 1775
                multiplier: '1.0'
                reg_price: '4285.9426'
                final_price:
                created_at: '2022-01-06T17:14:16.220Z'
                updated_at: '2022-01-06T17:14:16.220Z'
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 461
                contest_application_id: 1707
                stock_id: 1777
                multiplier: '1.0'
                reg_price: '815.9245'
                final_price:
                created_at: '2022-01-06T17:14:17.483Z'
                updated_at: '2022-01-06T17:14:17.483Z'
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 1413
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-10T00:00:00.000Z'
                status: created
                coins_entry_fee: 5963266495
                max_fantasy_points_threshold: 9111988552
                use_briefcase_only: true
                direction_strategy: single_per_user
                fixed_direction_up:
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T17:14:18.256Z'
                updated_at: '2022-01-06T17:14:18.256Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      tags:
      - Contest
      responses:
        '200':
          description: all contests
          content:
            application/json:
              example:
              - id: 1415
                reg_ending_at: '2022-01-07T00:00:00.000Z'
                summarizing_at: '2022-01-13T00:00:00.000Z'
                status: created
                coins_entry_fee: 8637490713
                max_fantasy_points_threshold: 4410389928
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T17:14:18.262Z'
                updated_at: '2022-01-06T17:14:18.262Z'
              - id: 1416
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-10T00:00:00.000Z'
                status: created
                coins_entry_fee: 6117391008
                max_fantasy_points_threshold: 956222417
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T17:14:18.263Z'
                updated_at: '2022-01-06T17:14:18.263Z'
              - id: 1417
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-10T00:00:00.000Z'
                status: created
                coins_entry_fee: 7285984463
                max_fantasy_points_threshold: 5962785488
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T17:14:18.264Z'
                updated_at: '2022-01-06T17:14:18.264Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 1419
                reg_ending_at: '2022-01-06T00:00:00.000Z'
                summarizing_at: '2022-01-13T00:00:00.000Z'
                status: created
                coins_entry_fee: 6811907425
                max_fantasy_points_threshold: 7339099465
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up:
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T17:14:19.033Z'
                updated_at: '2022-01-06T17:14:19.033Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 1779
                name: MSFT
                created_at: '2022-01-06T17:14:19.802Z'
                updated_at: '2022-01-06T17:14:19.802Z'
        '400':
          description: stock already exists / invalid stock
          content:
            application/json:
              example:
                error: |
                  An Error occurred PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint "index_stocks_on_name"
                  DETAIL:  Key (name)=(AMGN) already exists.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 1783
                name: CMCSA
                created_at: '2022-01-06T17:14:20.311Z'
                updated_at: '2022-01-06T17:14:20.311Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 1786
                name: BRK.B
                created_at: '2022-01-06T17:14:21.091Z'
                updated_at: '2022-01-06T17:14:21.091Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 4644
                username: myong#84
                email: booker_konopelski@gerhold-hermiston.io
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-06T17:14:21.606Z'
                updated_at: '2022-01-06T17:14:21.609Z'
                provider: email
                uid: booker_konopelski@gerhold-hermiston.io
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                email: tasha@blanda.biz
                email_validated: false
                id: 4645
                fantasy_points: 0
                coins: 0
                uid: tasha@blanda.biz
                username: keely_gleichner#85
                preferred_lang: ru_RU
                avatar_id:
                created_at: '2022-01-06T17:14:21.862Z'
                updated_at: '2022-01-06T17:14:21.865Z'
                provider: email
                allow_password_change: false
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 4646
                username: shaunte#86
                email: jarod_goldner@baumbach.biz
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-06T17:14:22.119Z'
                updated_at: '2022-01-06T17:14:22.119Z'
                provider: email
                uid: jarod_goldner@baumbach.biz
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 1708
                user_id: 4649
                contest_id: 1420
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-06T17:14:22.879Z'
                updated_at: '2022-01-06T17:14:22.879Z'
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
