---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create an achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 79
                user_id: 506
                achievement_identifier: 42
                created_at: '2022-01-07T12:40:29.879Z'
                updated_at: '2022-01-07T12:40:29.879Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 80
                user_id: 507
                achievement_identifier: 525
                created_at: '2022-01-07T12:40:30.130Z'
                updated_at: '2022-01-07T12:40:30.130Z'
              - id: 81
                user_id: 507
                achievement_identifier: 376
                created_at: '2022-01-07T12:40:30.131Z'
                updated_at: '2022-01-07T12:40:30.131Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 84
                user_id: 510
                achievement_identifier: 351
                created_at: '2022-01-07T12:40:30.906Z'
                updated_at: '2022-01-07T12:40:30.906Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 512
                  username: dante_tillman#7
                  email: petra.waters@mayer.com
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-07T12:40:31.672Z'
                  updated_at: '2022-01-07T12:40:31.672Z'
                  provider: email
                  uid: petra.waters@mayer.com
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id:
                  username: mark#12
                  email: johnathan
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at:
                  updated_at:
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'lina.labadie@quitzon.io' has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: cristal@schneider.com
                  email_validated: false
                  id: 517
                  fantasy_points: 0
                  coins: 0
                  uid: cristal@schneider.com
                  username: jerald_osinski#15
                  preferred_lang: ru_RU
                  avatar_id:
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid; email is not confirmed
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 525
                  username: jeannette#23
                  email: rickie.bergstrom@schmidt-collier.name
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: rickie.bergstrom@schmidt-collier.name
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/auth/confirmation":
    post:
      summary: Resend confirmation
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: confirmation sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'lang@green-turner.info' containing
                  instructions for confirming your account.
        '404':
          description: email is invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'dong@gutmann.co'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/auth/password":
    put:
      summary: Change password
      tags:
      - Auth
      description: Change password
      parameters: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: josue.beier@schowalter.org
                  email_validated: false
                  id: 529
                  fantasy_points: 0
                  coins: 0
                  uid: josue.beier@schowalter.org
                  username: rhoda.labadie#27
                  preferred_lang: ru_RU
                  avatar_id:
                  created_at: '2022-01-07T12:40:38.513Z'
                  updated_at: '2022-01-07T12:40:38.769Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
              - password
              - password_confirmation
  "/api/v1/auth/password/":
    put:
      summary: Change password with reset_password_token
      tags:
      - Auth
      description: Set password that was reset
      parameters: []
      security: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: darcy@williamson-rempel.biz
                  email_validated: false
                  id: 533
                  fantasy_points: 0
                  coins: 0
                  uid: darcy@williamson-rempel.biz
                  username: calvin#31
                  preferred_lang: ru_RU
                  avatar_id:
                  created_at: '2022-01-07T12:40:40.040Z'
                  updated_at: '2022-01-07T12:40:40.344Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
                reset_password_token:
                  type: string
              required:
              - password
              - password_confirmation
              - reset_password_token
    post:
      summary: Send a password reset email
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: email has been sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'ezra_pfeffer@braun-stanton.name'
                  containing instructions for resetting your password.
        '404':
          description: invalid email
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'harlan.mueller'.
        '401':
          description: missing email
          content:
            application/json:
              example:
                success: false
                errors:
                - You must provide an email address.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 50
                expiring_at: '2022-01-14T12:40:42.376Z'
                user_id: 540
                created_at: '2022-01-07T12:40:42.384Z'
                updated_at: '2022-01-07T12:40:42.384Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 51
                expiring_at: '2022-02-03T00:00:00.000Z'
                user_id: 541
                created_at: '2022-01-07T12:40:42.635Z'
                updated_at: '2022-01-07T12:40:42.635Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 54
                expiring_at: '2022-08-06T00:00:00.000Z'
                user_id: 544
                created_at: '2022-01-07T12:40:43.408Z'
                updated_at: '2022-01-07T12:40:43.408Z'
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 58
                expiring_at: '2022-10-18T00:00:00.000Z'
                user_id: 548
                created_at: '2022-01-07T12:40:44.457Z'
                updated_at: '2022-01-07T12:40:44.457Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 230
                user_id: 550
                contest_id: 420
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-07T12:40:45.251Z'
                updated_at: '2022-01-07T12:40:45.251Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      tags:
      - ContestApplication
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 232
                user_id: 557
                contest_id: 425
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-07T12:40:46.759Z'
                updated_at: '2022-01-07T12:40:46.759Z'
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 235
                user_id: 560
                contest_id: 431
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-07T12:40:47.541Z'
                updated_at: '2022-01-07T12:40:47.541Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 34
                contest_application_id: 237
                stock_id: 273
                multiplier: '10.0'
                reg_price:
                final_price:
                created_at: '2022-01-07T12:40:48.568Z'
                updated_at: '2022-01-07T12:40:48.568Z'
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 37
                contest_application_id: 241
                stock_id: 277
                multiplier: '1.0'
                reg_price: '2017.1319'
                final_price:
                created_at: '2022-01-07T12:40:50.344Z'
                updated_at: '2022-01-07T12:40:50.344Z'
              - id: 38
                contest_application_id: 242
                stock_id: 278
                multiplier: '1.0'
                reg_price: '3602.8518'
                final_price:
                created_at: '2022-01-07T12:40:50.346Z'
                updated_at: '2022-01-07T12:40:50.346Z'
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 41
                contest_application_id: 248
                stock_id: 284
                multiplier: '1.0'
                reg_price: '2107.9857'
                final_price:
                created_at: '2022-01-07T12:40:52.623Z'
                updated_at: '2022-01-07T12:40:52.623Z'
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 448
                reg_ending_at: '2022-01-07T00:00:00.000Z'
                summarizing_at: '2022-01-14T00:00:00.000Z'
                status: created
                coins_entry_fee: 5230076508
                max_fantasy_points_threshold: 6730505030
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up:
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T12:40:53.896Z'
                updated_at: '2022-01-07T12:40:53.896Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      parameters:
      - name: fixed_direction_up
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: use_briefcase_only
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: use_disabled_multipliers
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: use_inverted_stock_prices
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: status
        in: query
        required: false
        nullable: true
        schema:
          type: string
      - name: direction_strategy
        in: query
        required: false
        nullable: true
        schema:
          type: string
      - name: coins_entry_fee_min_edge
        in: query
        required: false
        nullable: true
        schema:
          type: integer
      - name: coins_entry_fee_max_edge
        in: query
        required: false
        nullable: true
        schema:
          type: integer
      - name: max_fantasy_points_threshold
        in: query
        required: false
        nullable: true
        schema:
          type: integer
      tags:
      - Contest
      responses:
        '200':
          description: get contests
          content:
            application/json:
              example:
              - id: 510
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-14T00:00:00.000Z'
                status: created
                coins_entry_fee: 2486167894
                max_fantasy_points_threshold: 3294897596
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T12:40:55.784Z'
                updated_at: '2022-01-07T12:40:55.784Z'
              - id: 511
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-11T00:00:00.000Z'
                status: created
                coins_entry_fee: 2457167856
                max_fantasy_points_threshold: 5143035279
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T12:40:55.785Z'
                updated_at: '2022-01-07T12:40:55.785Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 515
                reg_ending_at: '2022-01-07T00:00:00.000Z'
                summarizing_at: '2022-01-14T00:00:00.000Z'
                status: created
                coins_entry_fee: 5392481120
                max_fantasy_points_threshold: 3944717744
                use_briefcase_only: true
                direction_strategy: single_per_user
                fixed_direction_up:
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T12:40:56.563Z'
                updated_at: '2022-01-07T12:40:56.563Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 287
                name: NVDA
                created_at: '2022-01-07T12:40:57.335Z'
                updated_at: '2022-01-07T12:40:57.335Z'
        '400':
          description: stock already exists / invalid stock
          content:
            application/json:
              example:
                error: |
                  An Error occurred PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint "index_stocks_on_name"
                  DETAIL:  Key (name)=(NVDA) already exists.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 290
                name: INTU
                created_at: '2022-01-07T12:40:57.596Z'
                updated_at: '2022-01-07T12:40:57.596Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 293
                name: C
                created_at: '2022-01-07T12:40:58.389Z'
                updated_at: '2022-01-07T12:40:58.389Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 606
                username: mitch#104
                email: leslie@howell-blanda.co
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-07T12:40:59.398Z'
                updated_at: '2022-01-07T12:40:59.402Z'
                provider: email
                uid: leslie@howell-blanda.co
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      parameters: []
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                username: test
                coins: 3
                email: terrance@swift.co
                email_validated: false
                id: 607
                fantasy_points: 0
                uid: terrance@swift.co
                preferred_lang: ru_RU
                avatar_id:
                created_at: '2022-01-07T12:40:59.658Z'
                updated_at: '2022-01-07T12:40:59.670Z'
                provider: email
                allow_password_change: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: email
                preferred_lang:
                  type: string
                fantasy_points:
                  type: integer
                coins:
                  type: integer
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              example:
                id: 608
                username: elvin_morissette#106
                email: jamal@aufderhar.name
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-07T12:40:59.917Z'
                updated_at: '2022-01-07T12:40:59.917Z'
                provider: email
                uid: jamal@aufderhar.name
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 251
                user_id: 612
                contest_id: 517
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-07T12:41:00.923Z'
                updated_at: '2022-01-07T12:41:00.923Z'
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
