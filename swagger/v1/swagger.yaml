---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create an achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 1
                user_id: 1
                achievement_identifier: 42
                created_at: '2022-01-08T16:43:38.109Z'
                updated_at: '2022-01-08T16:43:38.109Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 2
                user_id: 2
                achievement_identifier: 53
                created_at: '2022-01-08T16:43:38.408Z'
                updated_at: '2022-01-08T16:43:38.408Z'
              - id: 3
                user_id: 2
                achievement_identifier: 988
                created_at: '2022-01-08T16:43:38.411Z'
                updated_at: '2022-01-08T16:43:38.411Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 6
                user_id: 5
                achievement_identifier: 239
                created_at: '2022-01-08T16:43:39.242Z'
                updated_at: '2022-01-08T16:43:39.242Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 7
                  username: vincenzo#7
                  email: huong@beahan.name
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-08T16:43:40.025Z'
                  updated_at: '2022-01-08T16:43:40.025Z'
                  provider: email
                  uid: huong@beahan.name
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id: 
                  username: scott_feil#12
                  email: arica
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: 
                  updated_at: 
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'kathlyn@terry.biz' has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: ezekiel@labadie.co
                  email_validated: false
                  id: 12
                  fantasy_points: 0
                  coins: 0
                  uid: ezekiel@labadie.co
                  username: jarod#15
                  preferred_lang: ru_RU
                  avatar_id: 
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid; email is not confirmed
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 20
                  username: ezekiel.hansen#23
                  email: cyrus.kulas@renner.biz
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: cyrus.kulas@renner.biz
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/auth/confirmation":
    post:
      summary: Resend confirmation
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: confirmation sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'creola_herman@walter.org' containing
                  instructions for confirming your account.
        '404':
          description: email is invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'billie@nikolaus.io'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/auth/password":
    put:
      summary: Change password
      tags:
      - Auth
      description: Change password
      parameters: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: raymond.denesik@erdman.org
                  email_validated: false
                  id: 24
                  fantasy_points: 0
                  coins: 0
                  uid: raymond.denesik@erdman.org
                  username: cristobal.cassin#27
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-08T16:43:47.027Z'
                  updated_at: '2022-01-08T16:43:47.288Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
              - password
              - password_confirmation
  "/api/v1/auth/password/":
    put:
      summary: Change password with reset_password_token
      tags:
      - Auth
      description: Set password that was reset
      parameters: []
      security: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: brent_senger@rodriguez-jakubowski.info
                  email_validated: false
                  id: 28
                  fantasy_points: 0
                  coins: 0
                  uid: brent_senger@rodriguez-jakubowski.info
                  username: dario.graham#31
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-08T16:43:48.595Z'
                  updated_at: '2022-01-08T16:43:49.000Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
                reset_password_token:
                  type: string
              required:
              - password
              - password_confirmation
              - reset_password_token
    post:
      summary: Send a password reset email
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: email has been sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'johnathon@leannon.org' containing
                  instructions for resetting your password.
        '404':
          description: invalid email
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'stuart'.
        '401':
          description: missing email
          content:
            application/json:
              example:
                success: false
                errors:
                - You must provide an email address.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 1
                expiring_at: '2022-01-15T16:43:51.220Z'
                user_id: 35
                created_at: '2022-01-08T16:43:51.235Z'
                updated_at: '2022-01-08T16:43:51.235Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 2
                expiring_at: '2022-12-05T00:00:00.000Z'
                user_id: 36
                created_at: '2022-01-08T16:43:51.489Z'
                updated_at: '2022-01-08T16:43:51.489Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 5
                expiring_at: '2022-05-13T00:00:00.000Z'
                user_id: 39
                created_at: '2022-01-08T16:43:52.277Z'
                updated_at: '2022-01-08T16:43:52.277Z'
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 9
                expiring_at: '2022-06-03T00:00:00.000Z'
                user_id: 43
                created_at: '2022-01-08T16:43:53.361Z'
                updated_at: '2022-01-08T16:43:53.361Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/briefcases/{id}/stocks/":
    get:
      summary: Get stocks by briefcase id
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stocks in briefcase
          content:
            application/json:
              example:
              - id: 5
                name: r7jc2n
                created_at: '2022-01-08T16:43:53.918Z'
                updated_at: '2022-01-08T16:43:53.918Z'
              - id: 6
                name: cqf2d
                created_at: '2022-01-08T16:43:53.920Z'
                updated_at: '2022-01-08T16:43:53.920Z'
              - id: 7
                name: 02bkn
                created_at: '2022-01-08T16:43:53.923Z'
                updated_at: '2022-01-08T16:43:53.923Z'
              - id: 8
                name: aheh
                created_at: '2022-01-08T16:43:53.926Z'
                updated_at: '2022-01-08T16:43:53.926Z'
              - id: 9
                name: mbk47aj0
                created_at: '2022-01-08T16:43:53.929Z'
                updated_at: '2022-01-08T16:43:53.929Z'
              - id: 10
                name: iogc4
                created_at: '2022-01-08T16:43:53.931Z'
                updated_at: '2022-01-08T16:43:53.931Z'
              - id: 11
                name: lzu4nrq1
                created_at: '2022-01-08T16:43:53.934Z'
                updated_at: '2022-01-08T16:43:53.934Z'
              - id: 12
                name: tm4w9g
                created_at: '2022-01-08T16:43:53.937Z'
                updated_at: '2022-01-08T16:43:53.937Z'
        '404':
          description: not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 1
                user_id: 48
                contest_id: 1
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-08T16:43:55.040Z'
                updated_at: '2022-01-08T16:43:55.040Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      tags:
      - ContestApplication
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 3
                user_id: 55
                contest_id: 6
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-08T16:43:56.650Z'
                updated_at: '2022-01-08T16:43:56.650Z'
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 6
                user_id: 58
                contest_id: 12
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-08T16:43:57.475Z'
                updated_at: '2022-01-08T16:43:57.475Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 1
                contest_application_id: 8
                stock_id: 13
                multiplier: '10.0'
                reg_price: 
                final_price: 
                created_at: '2022-01-08T16:43:58.570Z'
                updated_at: '2022-01-08T16:43:58.570Z'
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 4
                contest_application_id: 12
                stock_id: 17
                multiplier: '1.0'
                reg_price: '2720.0217'
                final_price: 
                created_at: '2022-01-08T16:44:00.405Z'
                updated_at: '2022-01-08T16:44:00.405Z'
              - id: 5
                contest_application_id: 13
                stock_id: 18
                multiplier: '1.0'
                reg_price: '3799.0829'
                final_price: 
                created_at: '2022-01-08T16:44:00.411Z'
                updated_at: '2022-01-08T16:44:00.411Z'
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 8
                contest_application_id: 19
                stock_id: 24
                multiplier: '1.0'
                reg_price: '4297.0741'
                final_price: 
                created_at: '2022-01-08T16:44:02.995Z'
                updated_at: '2022-01-08T16:44:02.995Z'
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 29
                reg_ending_at: '2022-01-11T00:00:00.000Z'
                summarizing_at: '2022-01-15T00:00:00.000Z'
                status: created
                coins_entry_fee: 1907343895
                max_fantasy_points_threshold: 6543206314
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-08T16:44:04.313Z'
                updated_at: '2022-01-08T16:44:04.313Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      parameters:
      - name: fixed_direction_up
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: use_briefcase_only
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: use_disabled_multipliers
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: use_inverted_stock_prices
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: status
        in: query
        required: false
        nullable: true
        schema:
          type: string
      - name: direction_strategy
        in: query
        required: false
        nullable: true
        schema:
          type: string
      - name: coins_entry_fee_min_edge
        in: query
        required: false
        nullable: true
        schema:
          type: integer
      - name: coins_entry_fee_max_edge
        in: query
        required: false
        nullable: true
        schema:
          type: integer
      - name: max_fantasy_points_threshold
        in: query
        required: false
        nullable: true
        schema:
          type: integer
      tags:
      - Contest
      responses:
        '200':
          description: get contests
          content:
            application/json:
              example:
              - id: 87
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-13T00:00:00.000Z'
                status: created
                coins_entry_fee: 5741433807
                max_fantasy_points_threshold: 4680312001
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-08T16:44:06.496Z'
                updated_at: '2022-01-08T16:44:06.496Z'
              - id: 88
                reg_ending_at: '2022-01-11T00:00:00.000Z'
                summarizing_at: '2022-01-13T00:00:00.000Z'
                status: finished
                coins_entry_fee: 7342162150
                max_fantasy_points_threshold: 9630305050
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-08T16:44:06.500Z'
                updated_at: '2022-01-08T16:44:06.500Z'
              - id: 89
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-12T00:00:00.000Z'
                status: created
                coins_entry_fee: 35
                max_fantasy_points_threshold: 1865533971
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-08T16:44:06.504Z'
                updated_at: '2022-01-08T16:44:06.504Z'
              - id: 92
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-15T00:00:00.000Z'
                status: created
                coins_entry_fee: 833854241
                max_fantasy_points_threshold: 4231447041
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-08T16:44:06.518Z'
                updated_at: '2022-01-08T16:44:06.518Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 96
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-15T00:00:00.000Z'
                status: created
                coins_entry_fee: 7920918762
                max_fantasy_points_threshold: 8216939711
                use_briefcase_only: true
                direction_strategy: single_per_user
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-08T16:44:07.392Z'
                updated_at: '2022-01-08T16:44:07.392Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 27
                name: F
                created_at: '2022-01-08T16:44:08.380Z'
                updated_at: '2022-01-08T16:44:08.380Z'
        '400':
          description: stock not created
          content:
            application/json:
              example:
                error: An Error occurred Finnhub couldn't find symbol w2j7
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 30
                name: QCOM
                created_at: '2022-01-08T16:44:13.112Z'
                updated_at: '2022-01-08T16:44:13.112Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 33
                name: AVGO
                created_at: '2022-01-08T16:44:13.969Z'
                updated_at: '2022-01-08T16:44:13.969Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/suggestions/":
    get:
      summary: Get 10 stocks
      tags:
      - Stock
      responses:
        '200':
          description: get 10 stocks
          content:
            application/json:
              example:
              - id: 63
                name: 7soz9utj
              - id: 55
                name: v7ix7gs
              - id: 57
                name: dyzx
              - id: 64
                name: h0cdk0vq
              - id: 52
                name: m0tdg
              - id: 39
                name: skeknn6m
              - id: 49
                name: eti2
              - id: 61
                name: yxjm0
              - id: 51
                name: 9fdslx
              - id: 37
                name: 13eh
  "/api/v1/stocks/name/{name}/":
    get:
      summary: Retrieve a stock by name
      tags:
      - Stock
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 65
                name: PG
                created_at: '2022-01-08T16:44:15.140Z'
                updated_at: '2022-01-08T16:44:15.140Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 108
                username: bryanna#111
                email: lenora_bauch@casper.name
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-08T16:44:15.964Z'
                updated_at: '2022-01-08T16:44:15.970Z'
                provider: email
                uid: lenora_bauch@casper.name
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      parameters: []
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                username: test
                coins: 3
                email: kia.lindgren@quitzon.io
                email_validated: false
                id: 109
                fantasy_points: 0
                uid: kia.lindgren@quitzon.io
                preferred_lang: ru_RU
                avatar_id: 
                created_at: '2022-01-08T16:44:16.229Z'
                updated_at: '2022-01-08T16:44:16.249Z'
                provider: email
                allow_password_change: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: email
                preferred_lang:
                  type: string
                fantasy_points:
                  type: integer
                coins:
                  type: integer
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              example:
                id: 110
                username: iesha_weber#113
                email: cheryl_white@upton.org
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-08T16:44:16.499Z'
                updated_at: '2022-01-08T16:44:16.499Z'
                provider: email
                uid: cheryl_white@upton.org
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 22
                user_id: 114
                contest_id: 98
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-08T16:44:17.567Z'
                updated_at: '2022-01-08T16:44:17.567Z'
  "/api/v1/users/scoreboard/":
    get:
      summary: Get users ordered by fantasy_points
      tags:
      - User
      responses:
        '200':
          description: get users
          content:
            application/json:
              example:
              - id: 116
                username: chrystal#119
                email: raguel_pagac@lynch.name
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 5674316548
                fantasy_points: 9925769509
                created_at: '2022-01-08T16:44:18.093Z'
                updated_at: '2022-01-08T16:44:18.093Z'
                provider: email
                uid: raguel_pagac@lynch.name
                allow_password_change: false
              - id: 119
                username: roderick#122
                email: lynell.satterfield@spinka.biz
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 8022479533
                fantasy_points: 6694547787
                created_at: '2022-01-08T16:44:18.819Z'
                updated_at: '2022-01-08T16:44:18.819Z'
                provider: email
                uid: lynell.satterfield@spinka.biz
                allow_password_change: false
              - id: 118
                username: andres#121
                email: hang.douglas@okuneva.name
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 6082258223
                fantasy_points: 6671734558
                created_at: '2022-01-08T16:44:18.578Z'
                updated_at: '2022-01-08T16:44:18.578Z'
                provider: email
                uid: hang.douglas@okuneva.name
                allow_password_change: false
              - id: 120
                username: alverta#123
                email: rosario_crona@dibbert.net
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 1544389003
                fantasy_points: 5633903095
                created_at: '2022-01-08T16:44:19.088Z'
                updated_at: '2022-01-08T16:44:19.088Z'
                provider: email
                uid: rosario_crona@dibbert.net
                allow_password_change: false
              - id: 117
                username: sebastian#120
                email: abram_wiegand@vandervort-welch.io
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 6357520345
                fantasy_points: 5452872685
                created_at: '2022-01-08T16:44:18.330Z'
                updated_at: '2022-01-08T16:44:18.330Z'
                provider: email
                uid: abram_wiegand@vandervort-welch.io
                allow_password_change: false
              - id: 115
                username: violette.boyle#118
                email: shawnta.reilly@roberts-thompson.com
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 1473049674
                fantasy_points: 4814853446
                created_at: '2022-01-08T16:44:17.835Z'
                updated_at: '2022-01-08T16:44:17.835Z'
                provider: email
                uid: shawnta.reilly@roberts-thompson.com
                allow_password_change: false
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
