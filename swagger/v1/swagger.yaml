---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create an achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 8
                user_id: 256
                achievement_identifier: 42
                created_at: '2022-01-07T10:15:04.777Z'
                updated_at: '2022-01-07T10:15:04.777Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 9
                user_id: 258
                achievement_identifier: 548
                created_at: '2022-01-07T10:15:05.003Z'
                updated_at: '2022-01-07T10:15:05.003Z'
              - id: 10
                user_id: 258
                achievement_identifier: 519
                created_at: '2022-01-07T10:15:05.010Z'
                updated_at: '2022-01-07T10:15:05.010Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 13
                user_id: 264
                achievement_identifier: 70
                created_at: '2022-01-07T10:15:05.701Z'
                updated_at: '2022-01-07T10:15:05.701Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 268
                  username: marcelino#7
                  email: byron.zboncak@watsica.io
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-07T10:15:06.357Z'
                  updated_at: '2022-01-07T10:15:06.357Z'
                  provider: email
                  uid: byron.zboncak@watsica.io
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id: 
                  username: dean.stanton#12
                  email: alfonzo
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: 
                  updated_at: 
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'jerald@murray-daniel.net' has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: calista@prosacco.co
                  email_validated: false
                  id: 285
                  fantasy_points: 0
                  coins: 0
                  uid: calista@prosacco.co
                  username: odell_mosciski#15
                  preferred_lang: ru_RU
                  avatar_id: 
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid; email is not confirmed
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 303
                  username: kristine#23
                  email: wilhelmina@schmidt.co
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: wilhelmina@schmidt.co
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/auth/confirmation":
    post:
      summary: Resend confirmation
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: confirmation sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'min@veum.name' containing instructions
                  for confirming your account.
        '404':
          description: email is invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'virgie@toy-veum.info'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/auth/password":
    put:
      summary: Change password
      tags:
      - Auth
      description: Change password
      parameters: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: ali_block@feest-abernathy.io
                  email_validated: false
                  id: 310
                  fantasy_points: 0
                  coins: 0
                  uid: ali_block@feest-abernathy.io
                  username: stacey#27
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-07T10:15:12.007Z'
                  updated_at: '2022-01-07T10:15:12.218Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
              - password
              - password_confirmation
  "/api/v1/auth/password/":
    put:
      summary: Change password with reset_password_token
      tags:
      - Auth
      description: Set password that was reset
      parameters: []
      security: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: wes@weissnat-runolfsdottir.com
                  email_validated: false
                  id: 319
                  fantasy_points: 0
                  coins: 0
                  uid: wes@weissnat-runolfsdottir.com
                  username: sandy#31
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-07T10:15:13.285Z'
                  updated_at: '2022-01-07T10:15:13.560Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
                reset_password_token:
                  type: string
              required:
              - password
              - password_confirmation
              - reset_password_token
    post:
      summary: Send a password reset email
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: email has been sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'jackie@emard-koss.net' containing
                  instructions for resetting your password.
        '404':
          description: invalid email
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'argentina'.
        '401':
          description: missing email
          content:
            application/json:
              example:
                success: false
                errors:
                - You must provide an email address.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 135
                expiring_at: '2022-01-14T10:15:15.318Z'
                user_id: 335
                created_at: '2022-01-07T10:15:15.334Z'
                updated_at: '2022-01-07T10:15:15.334Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 136
                expiring_at: '2022-02-16T00:00:00.000Z'
                user_id: 337
                created_at: '2022-01-07T10:15:15.552Z'
                updated_at: '2022-01-07T10:15:15.552Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 139
                expiring_at: '2022-03-21T00:00:00.000Z'
                user_id: 343
                created_at: '2022-01-07T10:15:16.231Z'
                updated_at: '2022-01-07T10:15:16.231Z'
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 143
                expiring_at: '2022-04-22T00:00:00.000Z'
                user_id: 351
                created_at: '2022-01-07T10:15:17.183Z'
                updated_at: '2022-01-07T10:15:17.183Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/briefcases/{id}/stocks/":
    get:
      summary: Get stocks by briefcase id
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stocks in briefcase
          content:
            application/json:
              example:
              - id: 398
                name: 7wmpy539
                created_at: '2022-01-07T10:15:17.702Z'
                updated_at: '2022-01-07T10:15:17.702Z'
              - id: 399
                name: o1p
                created_at: '2022-01-07T10:15:17.706Z'
                updated_at: '2022-01-07T10:15:17.706Z'
        '404':
          description: not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 53
                user_id: 362
                contest_id: 64
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-07T10:15:18.659Z'
                updated_at: '2022-01-07T10:15:18.659Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      tags:
      - ContestApplication
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 60
                user_id: 375
                contest_id: 75
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-07T10:15:20.005Z'
                updated_at: '2022-01-07T10:15:20.005Z'
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 65
                user_id: 380
                contest_id: 92
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-07T10:15:20.746Z'
                updated_at: '2022-01-07T10:15:20.746Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 34
                contest_application_id: 67
                stock_id: 533
                multiplier: '10.0'
                reg_price: 
                final_price: 
                created_at: '2022-01-07T10:15:21.704Z'
                updated_at: '2022-01-07T10:15:21.704Z'
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 37
                contest_application_id: 79
                stock_id: 537
                multiplier: '1.0'
                reg_price: '1691.7154'
                final_price: 
                created_at: '2022-01-07T10:15:23.287Z'
                updated_at: '2022-01-07T10:15:23.287Z'
              - id: 38
                contest_application_id: 81
                stock_id: 538
                multiplier: '1.0'
                reg_price: '905.0885'
                final_price: 
                created_at: '2022-01-07T10:15:23.297Z'
                updated_at: '2022-01-07T10:15:23.297Z'
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 41
                contest_application_id: 97
                stock_id: 544
                multiplier: '1.0'
                reg_price: '1219.5135'
                final_price: 
                created_at: '2022-01-07T10:15:25.265Z'
                updated_at: '2022-01-07T10:15:25.265Z'
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 114
                reg_ending_at: '2022-01-10T00:00:00.000Z'
                summarizing_at: '2022-01-13T00:00:00.000Z'
                status: created
                coins_entry_fee: 1078954628
                max_fantasy_points_threshold: 4564046903
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T10:15:26.372Z'
                updated_at: '2022-01-07T10:15:26.372Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      tags:
      - Contest
      responses:
        '200':
          description: all contests
          content:
            application/json:
              example:
              - id: 115
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-14T00:00:00.000Z'
                status: created
                coins_entry_fee: 8524396408
                max_fantasy_points_threshold: 1978835660
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T10:15:26.387Z'
                updated_at: '2022-01-07T10:15:26.387Z'
              - id: 116
                reg_ending_at: '2022-01-10T00:00:00.000Z'
                summarizing_at: '2022-01-12T00:00:00.000Z'
                status: created
                coins_entry_fee: 9861874302
                max_fantasy_points_threshold: 8592485034
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T10:15:26.392Z'
                updated_at: '2022-01-07T10:15:26.392Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 119
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-11T00:00:00.000Z'
                status: created
                coins_entry_fee: 7501533513
                max_fantasy_points_threshold: 4526100219
                use_briefcase_only: true
                direction_strategy: single_per_user
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-07T10:15:27.083Z'
                updated_at: '2022-01-07T10:15:27.083Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 547
                name: AMZN
                created_at: '2022-01-07T10:15:28.314Z'
                updated_at: '2022-01-07T10:15:28.314Z'
        '400':
          description: stock not created
          content:
            application/json:
              example:
                error: An Error occurred Finnhub couldn't find symbol 8lq20
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 550
                name: JNJ
                created_at: '2022-01-07T10:15:33.341Z'
                updated_at: '2022-01-07T10:15:33.341Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 553
                name: CHTR
                created_at: '2022-01-07T10:15:34.088Z'
                updated_at: '2022-01-07T10:15:34.088Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/suggestions/":
    get:
      summary: Get 10 stocks
      tags:
      - Stock
      responses:
        '200':
          description: get 10 stocks
          content:
            application/json:
              example:
              - id: 576
                name: h45so4x
              - id: 581
                name: vv95baz
              - id: 556
                name: x31la
              - id: 573
                name: v1d81y0
              - id: 572
                name: ysnr90bu
              - id: 575
                name: 5pqim
              - id: 560
                name: zbdtf
              - id: 562
                name: xyp9abr
              - id: 561
                name: 1frxzu
              - id: 566
                name: fhsm2
  "/api/v1/stocks/name/{name}/":
    get:
      summary: Retrieve a stock by name
      tags:
      - Stock
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 585
                name: CHTR
                created_at: '2022-01-07T10:15:35.129Z'
                updated_at: '2022-01-07T10:15:35.129Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 493
                username: silas#104
                email: max@schimmel-padberg.biz
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-07T10:15:35.781Z'
                updated_at: '2022-01-07T10:15:35.790Z'
                provider: email
                uid: max@schimmel-padberg.biz
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      parameters: []
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                username: test
                coins: 3
                email: burton@pollich-robel.net
                email_validated: false
                id: 495
                fantasy_points: 0
                uid: burton@pollich-robel.net
                preferred_lang: ru_RU
                avatar_id: 
                created_at: '2022-01-07T10:15:36.010Z'
                updated_at: '2022-01-07T10:15:36.036Z'
                provider: email
                allow_password_change: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: email
                preferred_lang:
                  type: string
                fantasy_points:
                  type: integer
                coins:
                  type: integer
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              example:
                id: 497
                username: vilma#106
                email: elois@bode-kassulke.io
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-07T10:15:36.246Z'
                updated_at: '2022-01-07T10:15:36.246Z'
                provider: email
                uid: elois@bode-kassulke.io
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 157
                user_id: 505
                contest_id: 123
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-07T10:15:37.135Z'
                updated_at: '2022-01-07T10:15:37.135Z'
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
