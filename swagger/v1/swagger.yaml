---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create a achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 566
                user_id: 5349
                achievement_identifier: 143
                created_at: '2022-01-05T19:39:06.139Z'
                updated_at: '2022-01-05T19:39:06.139Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 567
                user_id: 5350
                achievement_identifier: 587
                created_at: '2022-01-05T19:39:06.386Z'
                updated_at: '2022-01-05T19:39:06.386Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete a achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 570
                user_id: 5353
                achievement_identifier: 843
                created_at: '2022-01-05T19:39:07.156Z'
                updated_at: '2022-01-05T19:39:07.156Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 5355
                  username: elvin.hettinger#8
                  email: lamont@marquardt-beier.org
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-05T19:39:07.917Z'
                  updated_at: '2022-01-05T19:39:07.920Z'
                  provider: email
                  uid: lamont@marquardt-beier.org
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id:
                  username: gilbert_spinka#13
                  email: olin
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at:
                  updated_at:
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'luis@heidenreich-lowe.biz' has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: theola@blick.org
                  email_validated: false
                  id: 5360
                  fantasy_points: 0
                  coins: 0
                  uid: theola@blick.org
                  username: edwardo.grimes#16
                  preferred_lang: ru_RU
                  avatar_id:
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 5366
                  username: cliff_hoeger#22
                  email: vanita.steuber@pouros.biz
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: vanita.steuber@pouros.biz
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 1069
                expiring_at: '2022-01-12T19:39:14.029Z'
                user_id: 5369
                created_at: '2022-01-05T19:39:14.030Z'
                updated_at: '2022-01-05T19:39:14.030Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 1070
                expiring_at: '2022-06-02T00:00:00.000Z'
                user_id: 5370
                created_at: '2022-01-05T19:39:14.276Z'
                updated_at: '2022-01-05T19:39:14.276Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 1073
                expiring_at: '2022-08-25T00:00:00.000Z'
                user_id: 5373
                created_at: '2022-01-05T19:39:15.049Z'
                updated_at: '2022-01-05T19:39:15.049Z'
              schema:
                type: object
                property:
                  id:
                    type: integer
                  expiring_at:
                    type: string
                  user_id:
                    type: integer
                  created_at:
                    type: string
                  updated_at:
                    type: string
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 1076
                expiring_at: '2022-08-11T00:00:00.000Z'
                user_id: 5376
                created_at: '2022-01-05T19:39:15.831Z'
                updated_at: '2022-01-05T19:39:15.831Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 1159
                user_id: 5379
                contest_id: 1386
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-05T19:39:16.626Z'
                updated_at: '2022-01-05T19:39:16.626Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      tags:
      - ContestApplication
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 1160
                user_id: 5381
                contest_id: 1388
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-05T19:39:17.132Z'
                updated_at: '2022-01-05T19:39:17.132Z'
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 1163
                user_id: 5384
                contest_id: 1391
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-05T19:39:17.906Z'
                updated_at: '2022-01-05T19:39:17.906Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 284
                contest_application_id: 1165
                stock_id: 1323
                multiplier: '1.0'
                reg_price:
                final_price:
                created_at: '2022-01-05T19:39:19.175Z'
                updated_at: '2022-01-05T19:39:19.175Z'
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 287
                contest_application_id: 1169
                stock_id: 1326
                multiplier: '1.0'
                reg_price: '2996.8459'
                final_price:
                created_at: '2022-01-05T19:39:20.669Z'
                updated_at: '2022-01-05T19:39:20.669Z'
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 289
                contest_application_id: 1171
                stock_id: 1328
                multiplier: '1.0'
                reg_price: '3231.5052'
                final_price:
                created_at: '2022-01-05T19:39:21.942Z'
                updated_at: '2022-01-05T19:39:21.942Z'
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 1400
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-09T00:00:00.000Z'
                status: created
                coins_entry_fee: 4778459029
                max_fantasy_points_threshold: 2482516618
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-05T19:39:22.713Z'
                updated_at: '2022-01-05T19:39:22.713Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      tags:
      - Contest
      parameters:
      - name: fixed_direction_up
        in: query
        required: false
        schema:
          type: boolean
      - name: use_briefcase_only
        in: query
        required: false
        schema:
          type: boolean
      - name: use_disabled_multipliers
        in: query
        required: false
        schema:
          type: boolean
      - name: use_inverted_stock_prices
        in: query
        required: false
        schema:
          type: boolean
      - name: status
        in: query
        required: false
        schema:
          type: string
      - name: direction_strategy
        in: query
        required: false
        schema:
          type: string
      - name: coins_entry_fee_min_edge
        in: query
        required: false
        schema:
          type: integer
      - name: coins_entry_fee_max_edge
        in: query
        required: false
        schema:
          type: integer
      - name: max_fantasy_points_threshold
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: all contests
          content:
            application/json:
              example:
              - id: 1408
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-12T00:00:00.000Z'
                status: created
                coins_entry_fee: 2249700526
                max_fantasy_points_threshold: 4105858854
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-05T19:39:22.724Z'
                updated_at: '2022-01-05T19:39:22.724Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                id: 1413
                coins_entry_fee: 9990478950
                direction_strategy: fixed
                fixed_direction_up: true
                max_fantasy_points_threshold: 224526919
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                status: created
                summarizing_at: '2022-01-10T00:00:00.000Z'
                use_briefcase_only: true
                created_at: '2022-01-05T19:39:23.748Z'
                updated_at: '2022-01-05T19:39:23.748Z'
        '400':
          description: contest not found
          content:
            application/json:
              example:
                error: an error occurred ["Reg ending at can't be blank"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 1415
                reg_ending_at: '2022-01-06T00:00:00.000Z'
                summarizing_at: '2022-01-10T00:00:00.000Z'
                status: created
                coins_entry_fee: 3025642521
                max_fantasy_points_threshold: 8903064635
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-05T19:39:24.260Z'
                updated_at: '2022-01-05T19:39:24.260Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 1329
                name: XOM
                created_at: '2022-01-05T19:39:25.022Z'
                updated_at: '2022-01-05T19:39:25.022Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 1330
                name: AVGO
                created_at: '2022-01-05T19:39:25.270Z'
                updated_at: '2022-01-05T19:39:25.270Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 1333
                name: V
                created_at: '2022-01-05T19:39:26.050Z'
                updated_at: '2022-01-05T19:39:26.050Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 3792
                username: test6
                email: test6@m.com
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-05T16:26:23.449Z'
                updated_at: '2022-01-05T16:26:23.455Z'
                provider: email
                uid: test6@m.com
                allow_password_change: false
              - id: 672
                username: test
                email: test3@m.com
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-05T11:15:31.291Z'
                updated_at: '2022-01-05T15:25:18.061Z'
                provider: email
                uid: test3@m.com
                allow_password_change: false
              - id: 5416
                username: melia#74
                email: dale@wehner.co
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-05T19:39:26.563Z'
                updated_at: '2022-01-05T19:39:26.566Z'
                provider: email
                uid: dale@wehner.co
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                email: manual@emmerich.io
                email_validated: false
                id: 5417
                fantasy_points: 0
                coins: 0
                uid: manual@emmerich.io
                username: karl_hayes#75
                preferred_lang: ru_RU
                avatar_id:
                created_at: '2022-01-05T19:39:26.822Z'
                updated_at: '2022-01-05T19:39:26.825Z'
                provider: email
                allow_password_change: false
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 5418
                username: eunice#76
                email: rosamond.schoen@rutherford.co
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-05T19:39:27.078Z'
                updated_at: '2022-01-05T19:39:27.078Z'
                provider: email
                uid: rosamond.schoen@rutherford.co
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 1172
                user_id: 5421
                contest_id: 1416
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-05T19:39:27.841Z'
                updated_at: '2022-01-05T19:39:27.841Z'
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
