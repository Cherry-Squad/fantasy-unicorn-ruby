---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create an achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 1
                user_id: 1
                achievement_identifier: 42
                created_at: '2022-01-09T22:48:34.270Z'
                updated_at: '2022-01-09T22:48:34.270Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 2
                user_id: 2
                achievement_identifier: 63
                created_at: '2022-01-09T22:48:34.536Z'
                updated_at: '2022-01-09T22:48:34.536Z'
              - id: 3
                user_id: 2
                achievement_identifier: 747
                created_at: '2022-01-09T22:48:34.540Z'
                updated_at: '2022-01-09T22:48:34.540Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 6
                user_id: 5
                achievement_identifier: 518
                created_at: '2022-01-09T22:48:35.378Z'
                updated_at: '2022-01-09T22:48:35.378Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 7
                  username: anamaria#7
                  email: filiberto.jerde@beer-harris.org
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 200
                  fantasy_points: 0
                  created_at: '2022-01-09T22:48:36.199Z'
                  updated_at: '2022-01-09T22:48:36.199Z'
                  provider: email
                  uid: filiberto.jerde@beer-harris.org
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id: 
                  username: bulah#12
                  email: lindsay
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 200
                  fantasy_points: 0
                  created_at: 
                  updated_at: 
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'jess@harris.net' has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: dina@leuschke-davis.net
                  email_validated: false
                  id: 12
                  fantasy_points: 0
                  coins: 200
                  uid: dina@leuschke-davis.net
                  username: tawanda.russel#15
                  preferred_lang: ru_RU
                  avatar_id: 
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid; email is not confirmed
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 20
                  username: jose_halvorson#23
                  email: delois@torp.co
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 200
                  fantasy_points: 0
                  provider: email
                  uid: delois@torp.co
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/auth/confirmation":
    post:
      summary: Resend confirmation
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: confirmation sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'kelly.fay@nienow.net' containing
                  instructions for confirming your account.
        '404':
          description: email is invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'ligia@wehner.name'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/auth/password":
    put:
      summary: Change password
      tags:
      - Auth
      description: Change password
      parameters: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: ruben@goodwin-volkman.biz
                  email_validated: false
                  id: 24
                  fantasy_points: 0
                  coins: 200
                  uid: ruben@goodwin-volkman.biz
                  username: bruce#27
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-09T22:48:43.348Z'
                  updated_at: '2022-01-09T22:48:43.616Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
              - password
              - password_confirmation
  "/api/v1/auth/password/":
    put:
      summary: Change password with reset_password_token
      tags:
      - Auth
      description: Set password that was reset
      parameters: []
      security: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: paris@herzog.net
                  email_validated: false
                  id: 28
                  fantasy_points: 0
                  coins: 200
                  uid: paris@herzog.net
                  username: ronnie.mccullough#31
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-09T22:48:44.947Z'
                  updated_at: '2022-01-09T22:48:45.322Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
                reset_password_token:
                  type: string
              required:
              - password
              - password_confirmation
              - reset_password_token
    post:
      summary: Send a password reset email
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: email has been sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'shaquana.padberg@wunsch.net' containing
                  instructions for resetting your password.
        '401':
          description: missing email
          content:
            application/json:
              example:
                success: false
                errors:
                - You must provide an email address.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 1
                expiring_at: '2022-01-16T22:48:47.241Z'
                user_id: 34
                created_at: '2022-01-09T22:48:47.255Z'
                updated_at: '2022-01-09T22:48:47.255Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 2
                expiring_at: '2022-02-27T00:00:00.000Z'
                user_id: 35
                created_at: '2022-01-09T22:48:47.520Z'
                updated_at: '2022-01-09T22:48:47.520Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 5
                expiring_at: '2022-09-27T00:00:00.000Z'
                user_id: 38
                created_at: '2022-01-09T22:48:48.357Z'
                updated_at: '2022-01-09T22:48:48.357Z'
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 9
                expiring_at: '2022-04-20T00:00:00.000Z'
                user_id: 42
                created_at: '2022-01-09T22:48:49.515Z'
                updated_at: '2022-01-09T22:48:49.515Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/briefcases/{id}/stocks/":
    get:
      summary: Get stocks by briefcase id
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stocks in briefcase
          content:
            application/json:
              example:
              - id: 5
                name: z0r8uwu
                created_at: '2022-01-09T22:48:50.092Z'
                updated_at: '2022-01-09T22:48:50.092Z'
        '404':
          description: not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 1
                user_id: 47
                contest_id: 1
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-09T22:48:51.213Z'
                updated_at: '2022-01-09T22:48:51.213Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      tags:
      - ContestApplication
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 3
                user_id: 54
                contest_id: 6
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-09T22:48:52.816Z'
                updated_at: '2022-01-09T22:48:52.816Z'
                user:
                  id: 54
                  username: samual.cronin#57
                  email: normand@ondricka.io
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 200
                  fantasy_points: 0
                  created_at: '2022-01-09T22:48:52.813Z'
                  updated_at: '2022-01-09T22:48:52.823Z'
                  provider: email
                  uid: normand@ondricka.io
                  allow_password_change: false
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 6
                user_id: 57
                contest_id: 12
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-09T22:48:53.705Z'
                updated_at: '2022-01-09T22:48:53.705Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 1
                contest_application_id: 8
                stock_id: 6
                multiplier: '10.0'
                reg_price: 
                final_price: 
                created_at: '2022-01-09T22:48:54.821Z'
                updated_at: '2022-01-09T22:48:54.821Z'
                direction_up: true
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
                direction_up:
                  type: boolean
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 4
                contest_application_id: 12
                stock_id: 10
                multiplier: '1.0'
                reg_price: '2987.0438'
                final_price: 
                created_at: '2022-01-09T22:48:56.744Z'
                updated_at: '2022-01-09T22:48:56.744Z'
                direction_up: true
                stock:
                  id: 10
                  name: NFLX
                  created_at: '2022-01-09T22:48:56.472Z'
                  updated_at: '2022-01-09T22:48:56.472Z'
              - id: 5
                contest_application_id: 13
                stock_id: 11
                multiplier: '1.0'
                reg_price: '3871.568'
                final_price: 
                created_at: '2022-01-09T22:48:56.751Z'
                updated_at: '2022-01-09T22:48:56.751Z'
                direction_up: true
                stock:
                  id: 11
                  name: GOOG
                  created_at: '2022-01-09T22:48:56.735Z'
                  updated_at: '2022-01-09T22:48:56.735Z'
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 8
                contest_application_id: 19
                stock_id: 17
                multiplier: '1.0'
                reg_price: '2773.2895'
                final_price: 
                created_at: '2022-01-09T22:48:59.179Z'
                updated_at: '2022-01-09T22:48:59.179Z'
                direction_up: false
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/{id}/register":
    post:
      summary: Register user in contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      tags:
      - Contest
      responses:
        '201':
          description: |-
            contest application created. contest application stocks created.
                    assign contest application stocks
          content:
            application/json:
              example:
                contest_app_stocks:
                - id: 10
                  contest_application_id: 22
                  stock_id: 20
                  multiplier: '1.2'
                  reg_price: 
                  final_price: 
                  created_at: '2022-01-09T22:49:00.559Z'
                  updated_at: '2022-01-09T22:49:00.559Z'
                  direction_up: true
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
        '400':
          description: user has no coins to take competition
          content:
            application/json:
              example:
                error: 'an error occurred: User has no coins'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    properties:
                      stock_id:
                        type: integer
                      multiplier:
                        type: integer
                      direction_up:
                        type: boolean
                    required:
                    - multiplier
                    - stock_id
                    - contest_application_id
                    - direction_up
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 35
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-16T00:00:00.000Z'
                status: created
                coins_entry_fee: 4993554364
                max_fantasy_points_threshold: 354928871
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-09T22:49:01.630Z'
                updated_at: '2022-01-09T22:49:01.630Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      parameters:
      - name: fixed_direction_up
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: use_briefcase_only
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: use_disabled_multipliers
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: use_inverted_stock_prices
        in: query
        required: false
        nullable: true
        schema:
          type: boolean
      - name: status
        in: query
        required: false
        nullable: true
        schema:
          type: string
      - name: direction_strategy
        in: query
        required: false
        nullable: true
        schema:
          type: string
      - name: coins_entry_fee_min_edge
        in: query
        required: false
        nullable: true
        schema:
          type: integer
      - name: coins_entry_fee_max_edge
        in: query
        required: false
        nullable: true
        schema:
          type: integer
      - name: max_fantasy_points_threshold
        in: query
        required: false
        nullable: true
        schema:
          type: integer
      tags:
      - Contest
      responses:
        '200':
          description: get contests
          content:
            application/json:
              example:
              - id: 98
                reg_ending_at: '2022-01-11T00:00:00.000Z'
                summarizing_at: '2022-01-16T00:00:00.000Z'
                status: created
                coins_entry_fee: 2230076688
                max_fantasy_points_threshold: 1979637253
                use_briefcase_only: false
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-09T22:49:03.884Z'
                updated_at: '2022-01-09T22:49:03.884Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 102
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-14T00:00:00.000Z'
                status: created
                coins_entry_fee: 7760328842
                max_fantasy_points_threshold: 7240215767
                use_briefcase_only: false
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-09T22:49:04.730Z'
                updated_at: '2022-01-09T22:49:04.730Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 23
                name: FB
                created_at: '2022-01-09T22:49:05.599Z'
                updated_at: '2022-01-09T22:49:05.599Z'
        '400':
          description: stock not created
          content:
            application/json:
              example:
                error: An Error occurred Finnhub couldn't find symbol pws5d
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 26
                name: WFC
                created_at: '2022-01-09T22:49:10.252Z'
                updated_at: '2022-01-09T22:49:10.252Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 29
                name: QCOM
                created_at: '2022-01-09T22:49:11.126Z'
                updated_at: '2022-01-09T22:49:11.126Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/suggestions/":
    get:
      summary: Get 10 stocks
      tags:
      - Stock
      responses:
        '200':
          description: get 10 stocks
          content:
            application/json:
              example:
              - id: 50
                name: mvr
              - id: 48
                name: 9tzqycu
              - id: 31
                name: bt0opyjq
              - id: 45
                name: jw26
              - id: 59
                name: 1nkeje
  "/api/v1/stocks/name/{name}/":
    get:
      summary: Retrieve a stock by name
      tags:
      - Stock
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 61
                name: INTC
                created_at: '2022-01-09T22:49:12.308Z'
                updated_at: '2022-01-09T22:49:12.308Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 110
                username: francis#113
                email: vaughn@white-bashirian.biz
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 200
                fantasy_points: 0
                created_at: '2022-01-09T22:49:13.111Z'
                updated_at: '2022-01-09T22:49:13.118Z'
                provider: email
                uid: vaughn@white-bashirian.biz
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      parameters: []
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                username: test
                coins: 3
                email: bernie_farrell@gislason.name
                email_validated: false
                id: 111
                fantasy_points: 0
                uid: bernie_farrell@gislason.name
                preferred_lang: ru_RU
                avatar_id: 
                created_at: '2022-01-09T22:49:13.392Z'
                updated_at: '2022-01-09T22:49:13.414Z'
                provider: email
                allow_password_change: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: email
                preferred_lang:
                  type: string
                fantasy_points:
                  type: integer
                coins:
                  type: integer
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              example:
                id: 112
                username: pete#115
                email: leonel.hartmann@schneider.net
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 200
                fantasy_points: 0
                created_at: '2022-01-09T22:49:13.675Z'
                updated_at: '2022-01-09T22:49:13.675Z'
                provider: email
                uid: leonel.hartmann@schneider.net
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 24
                user_id: 116
                contest_id: 104
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-09T22:49:14.744Z'
                updated_at: '2022-01-09T22:49:14.744Z'
  "/api/v1/users/scoreboard/":
    get:
      summary: Get users ordered by fantasy_points
      tags:
      - User
      responses:
        '200':
          description: get users
          content:
            application/json:
              example:
              - id: 119
                username: peter_hilll#122
                email: steven.kozey@hayes.org
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 1498672125
                fantasy_points: 7712723560
                created_at: '2022-01-09T22:49:15.526Z'
                updated_at: '2022-01-09T22:49:15.526Z'
                provider: email
                uid: steven.kozey@hayes.org
                allow_password_change: false
              - id: 118
                username: boyd#121
                email: evalyn.adams@weimann.com
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 7855250007
                fantasy_points: 5276216117
                created_at: '2022-01-09T22:49:15.273Z'
                updated_at: '2022-01-09T22:49:15.273Z'
                provider: email
                uid: evalyn.adams@weimann.com
                allow_password_change: false
              - id: 120
                username: bettie#123
                email: hester@erdman-russel.name
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 9150325631
                fantasy_points: 3897250007
                created_at: '2022-01-09T22:49:15.779Z'
                updated_at: '2022-01-09T22:49:15.779Z'
                provider: email
                uid: hester@erdman-russel.name
                allow_password_change: false
              - id: 121
                username: natividad#124
                email: antone_gibson@collins.biz
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 3253651778
                fantasy_points: 3601770883
                created_at: '2022-01-09T22:49:16.032Z'
                updated_at: '2022-01-09T22:49:16.032Z'
                provider: email
                uid: antone_gibson@collins.biz
                allow_password_change: false
              - id: 117
                username: elisha_gulgowski#120
                email: elke@casper-kutch.name
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 9235260418
                fantasy_points: 2935229355
                created_at: '2022-01-09T22:49:15.019Z'
                updated_at: '2022-01-09T22:49:15.019Z'
                provider: email
                uid: elke@casper-kutch.name
                allow_password_change: false
              - id: 123
                username: woodrow.brekke#126
                email: luvenia@kris.org
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 7541759266
                fantasy_points: 1999560473
                created_at: '2022-01-09T22:49:16.552Z'
                updated_at: '2022-01-09T22:49:16.552Z'
                provider: email
                uid: luvenia@kris.org
                allow_password_change: false
              - id: 122
                username: chung#125
                email: joey@pacocha.biz
                email_validated: true
                preferred_lang: ru_RU
                avatar_id: 
                coins: 2428676919
                fantasy_points: 241708414
                created_at: '2022-01-09T22:49:16.285Z'
                updated_at: '2022-01-09T22:49:16.285Z'
                provider: email
                uid: joey@pacocha.biz
                allow_password_change: false
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
