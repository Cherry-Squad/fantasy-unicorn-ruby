---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create a achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 37
                user_id: 387
                achievement_identifier: 725
                created_at: '2022-01-06T14:46:47.208Z'
                updated_at: '2022-01-06T14:46:47.208Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 38
                user_id: 388
                achievement_identifier: 183
                created_at: '2022-01-06T14:46:47.455Z'
                updated_at: '2022-01-06T14:46:47.455Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete a achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 41
                user_id: 391
                achievement_identifier: 913
                created_at: '2022-01-06T14:46:48.225Z'
                updated_at: '2022-01-06T14:46:48.225Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 393
                  username: noelle.lakin#8
                  email: terry@predovic.org
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-06T14:46:48.986Z'
                  updated_at: '2022-01-06T14:46:48.989Z'
                  provider: email
                  uid: terry@predovic.org
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id:
                  username: alex.senger#13
                  email: willy_osinski
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  created_at:
                  updated_at:
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'kristen.mueller@cole.name' has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: anjanette@dubuque.net
                  email_validated: false
                  id: 398
                  fantasy_points: 0
                  coins: 0
                  uid: anjanette@dubuque.net
                  username: delphia#16
                  preferred_lang: ru_RU
                  avatar_id:
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 404
                  username: kory#22
                  email: kelvin.kautzer@ziemann.co
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id:
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: kelvin.kautzer@ziemann.co
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 92
                expiring_at: '2022-01-13T14:46:54.990Z'
                user_id: 407
                created_at: '2022-01-06T14:46:54.991Z'
                updated_at: '2022-01-06T14:46:54.991Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 93
                expiring_at: '2022-04-28T00:00:00.000Z'
                user_id: 408
                created_at: '2022-01-06T14:46:55.239Z'
                updated_at: '2022-01-06T14:46:55.239Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 99
                expiring_at: '2022-12-14T00:00:00.000Z'
                user_id: 414
                created_at: '2022-01-06T14:46:56.741Z'
                updated_at: '2022-01-06T14:46:56.741Z'
              schema:
                type: object
                property:
                  id:
                    type: integer
                  expiring_at:
                    type: string
                  user_id:
                    type: integer
                  created_at:
                    type: string
                  updated_at:
                    type: string
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 102
                expiring_at: '2022-06-20T00:00:00.000Z'
                user_id: 417
                created_at: '2022-01-06T14:46:57.520Z'
                updated_at: '2022-01-06T14:46:57.520Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 71
                user_id: 420
                contest_id: 126
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-06T14:46:58.315Z'
                updated_at: '2022-01-06T14:46:58.315Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      tags:
      - ContestApplication
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 72
                user_id: 422
                contest_id: 128
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-06T14:46:58.823Z'
                updated_at: '2022-01-06T14:46:58.823Z'
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 75
                user_id: 425
                contest_id: 131
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-06T14:46:59.595Z'
                updated_at: '2022-01-06T14:46:59.595Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 31
                contest_application_id: 77
                stock_id: 78
                multiplier: '1.0'
                reg_price:
                final_price:
                created_at: '2022-01-06T14:47:00.868Z'
                updated_at: '2022-01-06T14:47:00.868Z'
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 34
                contest_application_id: 81
                stock_id: 81
                multiplier: '1.0'
                reg_price: '1219.7486'
                final_price:
                created_at: '2022-01-06T14:47:02.365Z'
                updated_at: '2022-01-06T14:47:02.365Z'
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 36
                contest_application_id: 83
                stock_id: 83
                multiplier: '1.0'
                reg_price: '2617.1538'
                final_price:
                created_at: '2022-01-06T14:47:03.639Z'
                updated_at: '2022-01-06T14:47:03.639Z'
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 141
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-11T00:00:00.000Z'
                status: created
                coins_entry_fee: 6775081387
                max_fantasy_points_threshold: 3070942110
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T14:47:04.409Z'
                updated_at: '2022-01-06T14:47:04.409Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      tags:
      - Contest
      responses:
        '200':
          description: all contests
          content:
            application/json:
              example:
              - id: 142
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                summarizing_at: '2022-01-10T00:00:00.000Z'
                status: created
                coins_entry_fee: 8089882377
                max_fantasy_points_threshold: 4596599241
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up:
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T14:47:04.412Z'
                updated_at: '2022-01-06T14:47:04.412Z'
              - id: 143
                reg_ending_at: '2022-01-06T00:00:00.000Z'
                summarizing_at: '2022-01-13T00:00:00.000Z'
                status: created
                coins_entry_fee: 2041868284
                max_fantasy_points_threshold: 2717621444
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up:
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T14:47:04.413Z'
                updated_at: '2022-01-06T14:47:04.413Z'
              - id: 144
                reg_ending_at: '2022-01-07T00:00:00.000Z'
                summarizing_at: '2022-01-10T00:00:00.000Z'
                status: created
                coins_entry_fee: 6471390828
                max_fantasy_points_threshold: 127909169
                use_briefcase_only: true
                direction_strategy: single_per_user
                fixed_direction_up:
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T14:47:04.414Z'
                updated_at: '2022-01-06T14:47:04.414Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 146
                reg_ending_at: '2022-01-07T00:00:00.000Z'
                summarizing_at: '2022-01-11T00:00:00.000Z'
                status: created
                coins_entry_fee: 4282863574
                max_fantasy_points_threshold: 8037400183
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: true
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T14:47:05.185Z'
                updated_at: '2022-01-06T14:47:05.185Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 85
                name: SBUX
                created_at: '2022-01-06T14:47:05.950Z'
                updated_at: '2022-01-06T14:47:05.950Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 86
                name: ORCL
                created_at: '2022-01-06T14:47:06.198Z'
                updated_at: '2022-01-06T14:47:06.198Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 89
                name: WFC
                created_at: '2022-01-06T14:47:06.979Z'
                updated_at: '2022-01-06T14:47:06.979Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 454
                username: darrin.frami#74
                email: arlette@nader.biz
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-06T14:47:07.488Z'
                updated_at: '2022-01-06T14:47:07.491Z'
                provider: email
                uid: arlette@nader.biz
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                email: bobette@gibson.co
                email_validated: false
                id: 455
                fantasy_points: 0
                coins: 0
                uid: bobette@gibson.co
                username: malcom#75
                preferred_lang: ru_RU
                avatar_id:
                created_at: '2022-01-06T14:47:07.745Z'
                updated_at: '2022-01-06T14:47:07.748Z'
                provider: email
                allow_password_change: false
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 456
                username: collin#76
                email: delbert@oreilly.biz
                email_validated: false
                preferred_lang: ru_RU
                avatar_id:
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-06T14:47:08.000Z'
                updated_at: '2022-01-06T14:47:08.000Z'
                provider: email
                uid: delbert@oreilly.biz
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 84
                user_id: 459
                contest_id: 147
                final_position:
                coins_delta:
                fantasy_points_delta:
                created_at: '2022-01-06T14:47:08.757Z'
                updated_at: '2022-01-06T14:47:08.757Z'
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
