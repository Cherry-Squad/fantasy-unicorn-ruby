---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create a achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 2
                user_id: 2
                achievement_identifier: 263
                created_at: '2022-01-05T13:19:02.986Z'
                updated_at: '2022-01-05T13:19:02.986Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 3
                user_id: 3
                achievement_identifier: 633
                created_at: '2022-01-05T13:19:03.304Z'
                updated_at: '2022-01-05T13:19:03.304Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete a achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 6
                user_id: 6
                achievement_identifier: 526
                created_at: '2022-01-05T13:19:04.296Z'
                updated_at: '2022-01-05T13:19:04.296Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 8
                  username: sixta#8
                  email: wesley@rodriguez-raynor.com
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-05T13:19:05.271Z'
                  updated_at: '2022-01-05T13:19:05.276Z'
                  provider: email
                  uid: wesley@rodriguez-raynor.com
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id: 
                  username: merrill#13
                  email: sade_mcdermott
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: 
                  updated_at: 
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'brigette@jaskolski-wilkinson.org' has been
                  destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: lisette.hoeger@bauch.name
                  email_validated: false
                  id: 13
                  fantasy_points: 0
                  coins: 0
                  uid: lisette.hoeger@bauch.name
                  username: elijah.monahan#16
                  preferred_lang: ru_RU
                  avatar_id: 
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 19
                  username: izetta#22
                  email: jacquiline.frami@dare.biz
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: jacquiline.frami@dare.biz
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 2
                expiring_at: '2022-01-12T13:19:12.984Z'
                user_id: 22
                created_at: '2022-01-05T13:19:12.986Z'
                updated_at: '2022-01-05T13:19:12.986Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 3
                expiring_at: '2022-05-07T00:00:00.000Z'
                user_id: 23
                created_at: '2022-01-05T13:19:13.304Z'
                updated_at: '2022-01-05T13:19:13.304Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 6
                expiring_at: '2022-03-20T00:00:00.000Z'
                user_id: 26
                created_at: '2022-01-05T13:19:14.297Z'
                updated_at: '2022-01-05T13:19:14.297Z'
              schema:
                type: object
                property:
                  id:
                    type: integer
                  expiring_at:
                    type: string
                  user_id:
                    type: integer
                  created_at:
                    type: string
                  updated_at:
                    type: string
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 9
                expiring_at: '2022-07-07T00:00:00.000Z'
                user_id: 29
                created_at: '2022-01-05T13:19:15.300Z'
                updated_at: '2022-01-05T13:19:15.300Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 1
                reg_ending_at: '2022-01-07T00:00:00.000Z'
                summarizing_at: '2022-01-12T00:00:00.000Z'
                status: created
                coins_entry_fee: 9974622072
                max_fantasy_points_threshold: 9308849395
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-05T13:19:16.008Z'
                updated_at: '2022-01-05T13:19:16.008Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      tags:
      - Contest
      responses:
        '200':
          description: get all contests
          content:
            application/json:
              example: []
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                use_briefcase_only: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                id: 4
                coins_entry_fee: 6159164431
                direction_strategy: single_per_user
                fixed_direction_up: 
                max_fantasy_points_threshold: 7964436978
                reg_ending_at: '2022-01-08T00:00:00.000Z'
                status: created
                summarizing_at: '2022-01-11T00:00:00.000Z'
                created_at: '2022-01-05T13:19:17.336Z'
                updated_at: '2022-01-05T13:19:17.336Z'
        '400':
          description: contest not found
          content:
            application/json:
              example:
                error: an error occurred ["Reg ending at can't be blank"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 6
                reg_ending_at: '2022-01-05T00:00:00.000Z'
                summarizing_at: '2022-01-10T00:00:00.000Z'
                status: created
                coins_entry_fee: 1219853764
                max_fantasy_points_threshold: 9283730115
                use_briefcase_only: true
                direction_strategy: single_per_user
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-05T13:19:18.004Z'
                updated_at: '2022-01-05T13:19:18.004Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 3
                name: MA
                created_at: '2022-01-05T13:19:18.995Z'
                updated_at: '2022-01-05T13:19:18.995Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 4
                name: BABA
                created_at: '2022-01-05T13:19:19.319Z'
                updated_at: '2022-01-05T13:19:19.319Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 7
                name: MA
                created_at: '2022-01-05T13:19:20.339Z'
                updated_at: '2022-01-05T13:19:20.339Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 46
                username: george#49
                email: esther@goodwin.org
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-05T13:19:21.005Z'
                updated_at: '2022-01-05T13:19:21.010Z'
                provider: email
                uid: esther@goodwin.org
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                email: loida.reichel@hodkiewicz.com
                email_validated: false
                id: 47
                fantasy_points: 0
                coins: 0
                uid: loida.reichel@hodkiewicz.com
                username: marylin#50
                preferred_lang: ru_RU
                avatar_id: 
                created_at: '2022-01-05T13:19:21.335Z'
                updated_at: '2022-01-05T13:19:21.340Z'
                provider: email
                allow_password_change: false
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 48
                username: archie#51
                email: ashlea@oberbrunner.com
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-05T13:19:21.667Z'
                updated_at: '2022-01-05T13:19:21.667Z'
                provider: email
                uid: ashlea@oberbrunner.com
                allow_password_change: false
        '404':
          description: stock not found
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
