---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/achievements/":
    post:
      summary: Create an achievement
      tags:
      - Achievement
      parameters: []
      responses:
        '201':
          description: achievement created
          content:
            application/json:
              example:
                id: 1
                user_id: 1
                achievement_identifier: 42
                created_at: '2022-01-06T21:18:55.098Z'
                updated_at: '2022-01-06T21:18:55.098Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                achievement_identifier:
                  type: string
              required:
              - achievement_identifier
    get:
      summary: Get all achievements
      tags:
      - Achievement
      responses:
        '200':
          description: get all achievement
          content:
            application/json:
              example:
              - id: 2
                user_id: 2
                achievement_identifier: 454
                created_at: '2022-01-06T21:18:55.419Z'
                updated_at: '2022-01-06T21:18:55.419Z'
              - id: 3
                user_id: 2
                achievement_identifier: 576
                created_at: '2022-01-06T21:18:55.422Z'
                updated_at: '2022-01-06T21:18:55.422Z'
  "/api/v1/achievements/{id}/":
    delete:
      summary: delete an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: achievement successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve an achievement
      tags:
      - Achievement
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: achievement found
          content:
            application/json:
              example:
                id: 6
                user_id: 5
                achievement_identifier: 381
                created_at: '2022-01-06T21:18:56.418Z'
                updated_at: '2022-01-06T21:18:56.418Z'
        '404':
          description: achievement not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/auth/":
    post:
      summary: Create a user
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 7
                  username: lily#7
                  email: kaitlyn@langosh.com
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: '2022-01-06T21:18:57.396Z'
                  updated_at: '2022-01-06T21:18:57.396Z'
                  provider: email
                  uid: kaitlyn@langosh.com
                  allow_password_change: false
        '422':
          description: incorrect email or username; email and/or username has already
            been taken
          content:
            application/json:
              example:
                status: error
                data:
                  id: 
                  username: carmen#12
                  email: laurel
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  created_at: 
                  updated_at: 
                  provider: email
                  uid: ''
                  allow_password_change: false
                errors:
                  email:
                  - is not an email
                  full_messages:
                  - Email is not an email
                  username:
                  - is too short (minimum is 3 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user
      tags:
      - Auth
      responses:
        '200':
          description: user successfully deleted
          content:
            application/json:
              example:
                status: success
                message: Account with UID 'georgetta@rowe.co' has been destroyed.
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to locate account for destruction.
                status: error
  "/api/v1/auth/sign_in":
    post:
      summary: Sign in
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: logged in
          headers:
            access-token:
              type: string
              description: Access token
            client:
              type: string
              description: Client token
            uid:
              type: string
              description: User identifier
            expiry:
              type: string
              description: Token expiry timestamp
          content:
            application/json:
              example:
                data:
                  email: laureen_damore@turcotte.co
                  email_validated: false
                  id: 12
                  fantasy_points: 0
                  coins: 0
                  uid: laureen_damore@turcotte.co
                  username: rosanne#15
                  preferred_lang: ru_RU
                  avatar_id: 
                  provider: email
                  allow_password_change: false
        '401':
          description: credentials are invalid; email is not confirmed
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/auth/sign_out":
    delete:
      summary: Sign out
      tags:
      - Auth
      responses:
        '200':
          description: signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/api/v1/auth/validate_token":
    get:
      summary: Validate token
      tags:
      - Auth
      responses:
        '200':
          description: token is valid
          content:
            application/json:
              example:
                success: true
                data:
                  id: 20
                  username: mauricio#23
                  email: signe@denesik.io
                  email_validated: false
                  preferred_lang: ru_RU
                  avatar_id: 
                  coins: 0
                  fantasy_points: 0
                  provider: email
                  uid: signe@denesik.io
                  allow_password_change: false
        '401':
          description: credentials are invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials
  "/api/v1/auth/confirmation":
    post:
      summary: Resend confirmation
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: confirmation sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'mildred@hayes-boehm.name' containing
                  instructions for confirming your account.
        '404':
          description: email is invalid
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'gilberto.hintz@bins.name'.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/auth/password":
    put:
      summary: Change password
      tags:
      - Auth
      description: Change password
      parameters: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: terry.fisher@rolfson.info
                  email_validated: false
                  id: 24
                  fantasy_points: 0
                  coins: 0
                  uid: terry.fisher@rolfson.info
                  username: waltraud#27
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-06T21:19:06.073Z'
                  updated_at: '2022-01-06T21:19:06.397Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
              - password
              - password_confirmation
  "/api/v1/auth/password/":
    put:
      summary: Change password with reset_password_token
      tags:
      - Auth
      description: Set password that was reset
      parameters: []
      security: []
      responses:
        '200':
          description: password has been updated
          content:
            application/json:
              example:
                success: true
                data:
                  email: jose_prohaska@kulas-schulist.io
                  email_validated: false
                  id: 28
                  fantasy_points: 0
                  coins: 0
                  uid: jose_prohaska@kulas-schulist.io
                  username: lizette.kshlerin#31
                  preferred_lang: ru_RU
                  avatar_id: 
                  created_at: '2022-01-06T21:19:08.007Z'
                  updated_at: '2022-01-06T21:19:08.442Z'
                  provider: email
                  allow_password_change: false
                message: Your password has been successfully updated.
        '422':
          description: must fill out the fields password; doesn't match password
          content:
            application/json:
              example:
                success: false
                errors:
                  password_confirmation:
                  - doesn't match Password
                  full_messages:
                  - Password confirmation doesn't match Password
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                success: false
                errors:
                - Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password_confirmation:
                  type: string
                reset_password_token:
                  type: string
              required:
              - password
              - password_confirmation
              - reset_password_token
    post:
      summary: Send a password reset email
      tags:
      - Auth
      parameters: []
      security: []
      responses:
        '200':
          description: email has been sent
          content:
            application/json:
              example:
                success: true
                message: An email has been sent to 'alan@mitchell-kshlerin.org' containing
                  instructions for resetting your password.
        '404':
          description: invalid email
          content:
            application/json:
              example:
                success: false
                errors:
                - Unable to find user with email 'shad'.
        '401':
          description: missing email
          content:
            application/json:
              example:
                success: false
                errors:
                - You must provide an email address.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/briefcases/":
    post:
      summary: Create a briefcase
      tags:
      - Briefcase
      responses:
        '201':
          description: briefcase created
          content:
            application/json:
              example:
                id: 1
                expiring_at: '2022-01-13T21:19:11.051Z'
                user_id: 35
                created_at: '2022-01-06T21:19:11.063Z'
                updated_at: '2022-01-06T21:19:11.063Z'
    get:
      summary: Get all briefcases
      tags:
      - Briefcase
      responses:
        '200':
          description: get all briefcases for current user
          content:
            application/json:
              example:
              - id: 2
                expiring_at: '2022-12-09T00:00:00.000Z'
                user_id: 36
                created_at: '2022-01-06T21:19:11.387Z'
                updated_at: '2022-01-06T21:19:11.387Z'
  "/api/v1/briefcases/{id}/":
    delete:
      summary: delete a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: briefcase successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: briefcase connected with current user found
          content:
            application/json:
              example:
                id: 5
                expiring_at: '2022-10-06T00:00:00.000Z'
                user_id: 39
                created_at: '2022-01-06T21:19:12.388Z'
                updated_at: '2022-01-06T21:19:12.388Z'
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
    patch:
      summary: Update a briefcase
      tags:
      - Briefcase
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: briefcase not found
          content:
            application/json:
              example:
                status: Not Found 404
        '201':
          description: briefcase updated
          content:
            application/json:
              example:
                id: 9
                expiring_at: '2022-07-28T00:00:00.000Z'
                user_id: 43
                created_at: '2022-01-06T21:19:13.740Z'
                updated_at: '2022-01-06T21:19:13.740Z'
        '400':
          description: stock not found
          content:
            application/json:
              example:
                status: Bad Request ( Stock not Found )
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                add:
                  type: boolean
  "/api/v1/contest_applications/":
    post:
      summary: Create a contest application
      tags:
      - ContestApplication
      parameters: []
      responses:
        '201':
          description: contest application created
          content:
            application/json:
              example:
                id: 1
                user_id: 45
                contest_id: 1
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-06T21:19:14.773Z'
                updated_at: '2022-01-06T21:19:14.773Z'
        '400':
          description: contest application created
          content:
            application/json:
              example:
                error: An Error occurred ["User must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                contest_id:
                  type: integer
              required:
              - user_id
              - contest_id
    get:
      summary: Get contest applications
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      tags:
      - ContestApplication
      responses:
        '200':
          description: |-
            get all contest applications for current user if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 3
                user_id: 52
                contest_id: 6
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-06T21:19:16.707Z'
                updated_at: '2022-01-06T21:19:16.707Z'
  "/api/v1/contest_applications/{id}/":
    delete:
      summary: delete a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application
      tags:
      - ContestApplication
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application found
          content:
            application/json:
              example:
                id: 6
                user_id: 55
                contest_id: 12
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-06T21:19:17.732Z'
                updated_at: '2022-01-06T21:19:17.732Z'
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contest_application_stocks/":
    post:
      summary: Create a contest application stock
      tags:
      - ContestApplicationStock
      parameters: []
      responses:
        '201':
          description: contest application stock created
          content:
            application/json:
              example:
                id: 1
                contest_application_id: 8
                stock_id: 5
                multiplier: '10.0'
                reg_price: 
                final_price: 
                created_at: '2022-01-06T21:19:19.063Z'
                updated_at: '2022-01-06T21:19:19.063Z'
        '400':
          description: contest application stock created
          content:
            application/json:
              example:
                error: An Error occurred ["Stock must exist"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_id:
                  type: integer
                contest_application_id:
                  type: integer
                multiplier:
                  type: integer
              required:
              - multiplier
              - stock_id
              - contest_application_id
    get:
      summary: Get contest application stock stocks
      tags:
      - ContestApplicationStock
      parameters:
      - name: contest_id
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: |-
            get all contest application stocks if contest_id not set otherwise returns all
                                   contest applications by contest_id
          content:
            application/json:
              example:
              - id: 4
                contest_application_id: 12
                stock_id: 9
                multiplier: '1.0'
                reg_price: '494.9426'
                final_price: 
                created_at: '2022-01-06T21:19:21.364Z'
                updated_at: '2022-01-06T21:19:21.364Z'
              - id: 5
                contest_application_id: 13
                stock_id: 10
                multiplier: '1.0'
                reg_price: '4926.9324'
                final_price: 
                created_at: '2022-01-06T21:19:21.369Z'
                updated_at: '2022-01-06T21:19:21.369Z'
  "/api/v1/contest_application_stocks/{id}/":
    delete:
      summary: delete a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest application successfully deleted
        '404':
          description: contest application not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest application stock
      tags:
      - ContestApplicationStock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest application stock found
          content:
            application/json:
              example:
                id: 8
                contest_application_id: 19
                stock_id: 16
                multiplier: '1.0'
                reg_price: '1005.2025'
                final_price: 
                created_at: '2022-01-06T21:19:24.283Z'
                updated_at: '2022-01-06T21:19:24.283Z'
        '404':
          description: contest application stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/contests/":
    post:
      summary: Create a contest
      tags:
      - Contest
      parameters: []
      responses:
        '201':
          description: contest created
          content:
            application/json:
              example:
                id: 29
                reg_ending_at: '2022-01-07T00:00:00.000Z'
                summarizing_at: '2022-01-11T00:00:00.000Z'
                status: created
                coins_entry_fee: 1229591544
                max_fantasy_points_threshold: 2378196746
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T21:19:25.914Z'
                updated_at: '2022-01-06T21:19:25.914Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_entry_fee:
                  type: integer
                direction_strategy:
                  type: string
                fixed_direction_up:
                  type: boolean
                max_fantasy_points_threshold:
                  type: integer
                reg_ending_at:
                  type: string
                status:
                  type: string
                summarizing_at:
                  type: string
                use_briefcase_only:
                  type: boolean
                use_disabled_multipliers:
                  type: boolean
                use_inverted_stock_prices:
                  type: boolean
              required:
              - coins_entry_fee
              - direction_strategy
              - fixed_direction_up
              - max_fantasy_points_threshold
              - reg_ending_at
              - status
              - summarizing_at
              - use_briefcase_only
              - use_disabled_multipliers
              - use_inverted_stock_prices
    get:
      summary: Get contests
      tags:
      - Contest
      responses:
        '200':
          description: all contests
          content:
            application/json:
              example:
              - id: 30
                reg_ending_at: '2022-01-06T00:00:00.000Z'
                summarizing_at: '2022-01-12T00:00:00.000Z'
                status: created
                coins_entry_fee: 6150171645
                max_fantasy_points_threshold: 7294331423
                use_briefcase_only: true
                direction_strategy: free
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T21:19:25.922Z'
                updated_at: '2022-01-06T21:19:25.922Z'
              - id: 31
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-12T00:00:00.000Z'
                status: created
                coins_entry_fee: 6726644348
                max_fantasy_points_threshold: 6424295611
                use_briefcase_only: true
                direction_strategy: fixed
                fixed_direction_up: false
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T21:19:25.925Z'
                updated_at: '2022-01-06T21:19:25.925Z'
  "/api/v1/contests/{id}/":
    delete:
      summary: delete a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: contest successfully deleted
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a contest
      tags:
      - Contest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: contest found
          content:
            application/json:
              example:
                id: 34
                reg_ending_at: '2022-01-09T00:00:00.000Z'
                summarizing_at: '2022-01-13T00:00:00.000Z'
                status: created
                coins_entry_fee: 4369955135
                max_fantasy_points_threshold: 68908457
                use_briefcase_only: true
                direction_strategy: single_per_user
                fixed_direction_up: 
                use_disabled_multipliers: false
                use_inverted_stock_prices: false
                created_at: '2022-01-06T21:19:26.926Z'
                updated_at: '2022-01-06T21:19:26.926Z'
        '404':
          description: contest not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/stocks/":
    post:
      summary: Create a stock
      tags:
      - Stock
      parameters: []
      responses:
        '201':
          description: stock created
          content:
            application/json:
              example:
                id: 19
                name: AMZN
                created_at: '2022-01-06T21:19:27.920Z'
                updated_at: '2022-01-06T21:19:27.920Z'
        '400':
          description: stock already exists / invalid stock
          content:
            application/json:
              example:
                error: |
                  An Error occurred PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint "index_stocks_on_name"
                  DETAIL:  Key (name)=(MA) already exists.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    get:
      summary: Get stocks
      tags:
      - Stock
      responses:
        '200':
          description: get all stocks
          content:
            application/json:
              example:
              - id: 22
                name: HSBC
                created_at: '2022-01-06T21:19:28.259Z'
                updated_at: '2022-01-06T21:19:28.259Z'
  "/api/v1/stocks/{id}/":
    delete:
      summary: delete a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: stock successfully deleted
        '404':
          description: Not found 404
          content:
            application/json:
              example:
                status: Not Found 404
    get:
      summary: Retrieve a stock
      tags:
      - Stock
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: stock found
          content:
            application/json:
              example:
                id: 25
                name: MSFT
                created_at: '2022-01-06T21:19:29.277Z'
                updated_at: '2022-01-06T21:19:29.277Z'
        '404':
          description: stock not found
          content:
            application/json:
              example:
                status: Not Found 404
  "/api/v1/users/":
    get:
      summary: Get users
      tags:
      - User
      responses:
        '200':
          description: get all users
          content:
            application/json:
              example:
              - id: 94
                username: darron#97
                email: tamisha@bruen.biz
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-06T21:19:30.572Z'
                updated_at: '2022-01-06T21:19:30.577Z'
                provider: email
                uid: tamisha@bruen.biz
                allow_password_change: false
    patch:
      summary: update a user
      tags:
      - User
      parameters: []
      responses:
        '201':
          description: user updated
          content:
            application/json:
              example:
                username: test
                coins: 3
                email: ian_emmerich@okon-brown.name
                email_validated: false
                id: 95
                fantasy_points: 0
                uid: ian_emmerich@okon-brown.name
                preferred_lang: ru_RU
                avatar_id: 
                created_at: '2022-01-06T21:19:30.903Z'
                updated_at: '2022-01-06T21:19:30.921Z'
                provider: email
                allow_password_change: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: email
                preferred_lang:
                  type: string
                fantasy_points:
                  type: integer
                coins:
                  type: integer
  "/api/v1/users/{id}/":
    get:
      summary: Retrieve a user
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              example:
                id: 96
                username: connie.littel#99
                email: deann@lakin-dietrich.io
                email_validated: false
                preferred_lang: ru_RU
                avatar_id: 
                coins: 0
                fantasy_points: 0
                created_at: '2022-01-06T21:19:31.256Z'
                updated_at: '2022-01-06T21:19:31.256Z'
                provider: email
                uid: deann@lakin-dietrich.io
                allow_password_change: false
        '404':
          description: stock not found
  "/api/v1/users/contest_applications/{id}/":
    get:
      summary: Get contest application for current user by id
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: get contest application by id
          content:
            application/json:
              example:
                id: 22
                user_id: 100
                contest_id: 36
                final_position: 
                coins_delta: 
                fantasy_points_delta: 
                created_at: '2022-01-06T21:19:32.554Z'
                updated_at: '2022-01-06T21:19:32.554Z'
consumes:
- application/json
produces:
- application/json
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: Access-Token
    client:
      type: apiKey
      in: header
      name: Client
    uid:
      type: apiKey
      in: header
      name: UID
security:
- accessToken: []
  client: []
  uid: []
